{"version":3,"sources":["serviceWorker.js","utils/contants.js","utils/index.js","firebase/mock-turns.js","components/Game.jsx","engine.js","useGlobalState.js","firebase/index.js","utils/localStorage.js","utils/toastService.js","components/Home.jsx","components/Toast.jsx","components/PlayerAvatar.jsx","components/PlayerBadge.jsx","components/GameLoading.jsx","components/GameWaitingRoom.jsx","components/GameHeader.jsx","components/GameAnnouncement.jsx","components/GameQuestionSelection.jsx","components/GameQuestionWaiting.jsx","components/GameQuestion.jsx","components/GameAnswer.jsx","components/AnswerChip.jsx","components/GameCompare.jsx","components/GameResult.jsx","components/GameOver.jsx","components/Mocks.jsx","components/App.jsx","index.js","images/bunker/floor-top.svg","images/bunker/floor-1.svg","images/bunker/floor-2.svg","images/bunker/floor-3.svg","images/bunker/floor-4.svg","images/bunker/floor-5.svg","images/bunker/floor-6.svg","images/bunker-mind-logo.svg","images/avatars/avatar-axolotl.svg","images/avatars/avatar-cardinal.svg","images/avatars/avatar-fox.svg","images/avatars/avatar-hedgehog.svg","images/avatars/avatar-lizard.svg","images/avatars/avatar-mole.svg","images/avatars/avatar-mouse.svg","images/avatars/avatar-otter.svg","images/avatars/avatar-owl.svg","images/avatars/avatar-platypus.svg","images/avatars/avatar-rat.svg","images/avatars/avatar-squirrel.svg","images/avatars/avatar-starling.svg","images/avatars/avatar-toad.svg","images/avatars/avatar-turtle.svg","images/avatars/avatar-unknown.svg"],"names":["Boolean","window","location","hostname","match","SCREENS","GAME_PHASES","COLORS","AVATARS","TEST_NOW","Date","now","NOOP","RESULT_ACTION","TURN_TYPES","0","1","2","3","TURN_TYPES_FLAVOR_TEXT","LOSER_FLAVOR_TEXT","lft1","lft2","lft3","lft4","lft5","lft6","lft7","lft8","lft9","lft10","lft11","lft12","lft13","lft14","lft15","lft16","lft17","lft18","lft19","lft20","shuffle","list","res","sort","Math","random","getRandomItems","quantity","shuffledList","Array","fill","i","length","item","getQuestion","questionID","QUESTIONS","deepCopy","obj","JSON","parse","stringify","shuffledFlavorTextsIDs","Object","keys","playersNames","disconnectInterval","getAnswers","nickname","reduce","acc","answer","index","text","toUpperCase","isMatch","getPlayers","number","floor","isReady","addAnswers","isOnline","scores","result","avatar","isAdmin","lastUpdated","ONE_MINUTE","isArray","score","answers","basics","gameID","avatars","phase","turn","isLocked","gameOver","floorBlockers","mockTurns","set","players","turnType","turnOrder","reverse","currentQuestionID","slice","Lin","action","flavorTextID","from","name","to","Kelly","Jack","Helen","Ian","Gabi","Adam","Beth","Cam","Danny","Evan","Fred","this","_dbRef","_isAdmin","me","usedQuestions","answersSet","compare","_interval","_tempSaveObj","playerNickname","setup","console","warn","setInterval","save","clearInterval","dataObj","print","delaySave","update","lastUpdatedBy","child","data","extendResult","state","reset","dbRef","values","forEach","player","newPlayer","isGameFull","Error","isUserOnline","setTimeout","isEveryoneReady","goToQuestionPhase","unReadyPlayers","userAnswers","goToComparePhase","Set","map","flat","prepareCompare","currentAnswer","pop","matches","entries","answerId","id","split","downvotes","userAnswersCopy","voterName","invalidDict","matchEntry","numPlayers","numDownvotes","playerName","toRemoveIndex","findIndex","a","undefined","totalPointsForAnswer","filter","turnResult","tiers","tiersAcc","push","entry","4","5","6","isGameOver","floorBlockersCopy","newFloorBlockers","highestScoreIndex","PlayerResult","moveUp","saved","moveDown","tier","startNextTurn","newTurn","resetPlayersForRound","flatOrderResults","find","log","resultObj","message","every","p","isEveryoneOnline","isUserSet","activePlayer","user","key","floorObj","orderedFloorObj","playerResult","orderedResults","bState","initialState","game","GameEngine","isLoading","screen","toast","isVisible","lastUpdatedAt","useGlobalState","createGlobalState","fb","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","store","isLoaded","appName","init","load","get","localStorage","getItem","value","type","error","notLoaded","setItem","toastService","severity","info","success","warning","Home","localStorageService","getDefaults","lsGameID","lsNickname","setGameID","setIsLoading","setNickname","setScreen","setToast","useState","errorGameID","setErrorGameID","isCreatingGame","setIsCreatingGame","isValidGameID","setIsValidGameID","isValidNickname","setIsValidNickname","tempGameID","setTempGameID","tempNickname","setTempNickname","showCreateGame","setShowCreateGame","useEffect","API","ref","once","snap","val","createGame","LETTERS","generateID","gameEngine","className","src","logo","alt","onClick","TextField","required","label","onChange","e","target","helperText","inputProps","maxLength","autoComplete","defaultValue","LinearProgress","style","background","Button","variant","color","disabled","setDefaults","Toast","handleClose","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","Alert","AVATAR_IMAGE_SOURCE","axolotl","avatarAxolotl","cardinal","avatarCardinal","fox","avatarFox","hedgehog","avatarHedgehog","lizard","avatarLizard","mole","avatarMole","mouse","avatarMouse","otter","avatarOtter","owl","avatarOwl","platypus","avatarPlatypus","rat","avatarRat","squirrel","avatarSquirrel","starling","avatarStarling","toad","avatarToad","turtle","avatarTurtle","PlayerAvatar","classNames","Avatar","avatarUnknown","PlayerBadge","timestamp","showName","isFloating","onlineClass","floatingClass","min","max","randomNumber","Badge","overlap","GameLoading","CircularProgress","fontSize","timeoutID","GameWaitingRoom","justLoading","setPlayer","err","clearTimeout","orderNumber","lockAndStart","startIcon","TurnIcon","FloorPosition","title","Score","Player","IconButton","refresh","GameHeader","currentPlayer","AppBar","position","FLOOR_IMAGE_SOURCE","floor1img","floor2img","floor3img","floor4img","floor5img","floor6img","Floor","floorNumber","blocker","AvatarGroup","GameAnnouncement","floors","floorsDistribution","floor1","floor2","floor3","floor4","floor5","floor6","floorTopImg","flavorTexts","getTurnTypeFlavorText","isUserReady","whosReady","setUserReady","endIcon","GameQuestionSelection","questions","setQuestions","selectedQuestion","setSelectedQuestion","items","selectedQuestions","currentQuestion","getUniqueQuestions","RadioGroup","aria-label","event","question","FormControlLabel","control","Radio","goToAnswerPhase","GameQuestionWaiting","GameQuestion","isUserActivePlayer","ANSWER_ICONS","GameAnswer","setCurrentQuestion","setAnswers","areAnswersValid","setAreAnswersValid","gotQuestion","size","answerNumber","answerLabel","answerIndex","newAnswers","trim","updateAnswer","submitAnswers","AnswerChip","options","currentUser","clickAction","addMatch","deleteAction","deleteIcon","chickable","removeMatch","didIVote","voteForAnswer","getChipTypeOptions","Chip","onDelete","clickable","GameCompare","nicknameKey","answerObj","getPlayerAvatar","userCompareMatchingAnswer","doneComparing","MOVE_ANIMATION_CLASS","MOVE_UP","MOVE_DOWN","SAVE","STAY","GAME_OVER","FloorAnimated","blockerClass","FloorExplanationSentence","FloorExplanation","GameResult","blockerState","readyForNewTurn","startNewTurn","GameOver","losers","resetGameID","deleteGame","GameScreen","Game","setDbRef","setGame","setLastUpdatedAt","firebaseReference","on","handleGameDisconnect","off","Mocks","Screen","App","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.adb6087c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const SCREENS = {\n  HOME: 'HOME',\n  GAME: 'GAME',\n};\n\nexport const GAME_PHASES = {\n  WAITING_ROOM: 'WAITING_ROOM',\n  ANNOUNCEMENT: 'ANNOUNCEMENT',\n  QUESTION: 'QUESTION',\n  ANSWER: 'ANSWER',\n  COMPARE: 'COMPARE',\n  RESULT: 'RESULT',\n  GAME_OVER: 'GAME_OVER',\n  NONE: 'NONE',\n};\n\nexport const COLORS = {\n  PRIMARY: '#ffa500',\n  SECONDARY: '#594A42',\n  RED: '#a01d0b',\n};\n\nexport const AVATARS = [\n  'axolotl',\n  'cardinal',\n  'fox',\n  'hedgehog',\n  'lizard',\n  'mole',\n  'mouse',\n  'otter',\n  'owl',\n  'platypus',\n  'rat',\n  'squirrel',\n  'starling',\n  'toad',\n  'turtle',\n];\n\nexport const ONE_MINUTE = 60000;\n\nexport const ONLINE_MINIUTE_THRESHOLD = 5;\n\nexport const DISCONNECT_MINIUTE_THRESHOLD = 15;\n\nexport const TEST_NOW = process.env.NODE_ENV === 'test' ? 1586640900000 : Date.now();\n\nexport const ENGINE_TIMEOUT = process.env.NODE_ENV === 'test' ? 0 : 1000;\n\nexport const NOOP = () => {};\n\nexport const RESULT_ACTION = {\n  MOVE_UP: 'MOVE_UP',\n  MOVE_DOWN: 'MOVE_DOWN',\n  SAVE: 'SAVE',\n  STAY: 'STAY',\n  GAME_OVER: 'GAME_OVER',\n};\n\nexport const TURN_TYPES = {\n  0: 'The lowest scores move up, the highest scores move down!',\n  1: 'The lowest scores move up!',\n  2: 'The 2 lowest scores move up!',\n  3: 'The 3 lowest scores move up!',\n};\n\nexport const TURN_TYPES_FLAVOR_TEXT = {\n  0: [\n    'We found an old newspaper that can be used as toiler paper and whoever has the best score will be awared with it.',\n    'I guess we can eat the pillows, so one person can stay.',\n    'If we all eat 20% less, we can keep a person longer.',\n    \"We can't live like this anymore, last give someone a change.\",\n  ],\n  1: [\n    'Just one this time. Easy and simple.',\n    'Last can of beans!',\n    \"It's the rules, someone has to go. Food is scarce.\",\n    \"Since we can't tell who used the last drop of hand sanitizer, let's get over with this fast.\",\n  ],\n  2: [\n    \"If Noah deal with things in pairs, why can't we?\",\n    'One, two, cha-cha-cha, one, two, cha-cha-cha, this round is like a tango.',\n    'The rice is gone!',\n    'I guess we could eat past for the 50th time, or... just an idea, move 2 people up.',\n  ],\n  3: [\n    'Someone ate some spicy food and used 3 rolls of toiler paper, I guess we need to kick more people out this time.',\n    'Chaos! The virus outside is so crazy, I heard you can get it by twearking.',\n    \"Uno, dos, tres! That's three people... in Spanish.\",\n    'Pandemic! Pandemic! Pandemic!',\n  ],\n};\n\nexport const LOSER_FLAVOR_TEXT = {\n  lft1: 'died of the virus',\n  lft2: 'is making a plan to destroy the bunker in vengeance',\n  lft3: 'stole all the toilet paper left right before leaving',\n  lft4: 'was murdered withing 2 minutes by wastelanders',\n  lft5: 'became a zombie',\n  lft6: 'has become immune to the virus',\n  lft7: 'has done plastic surgery and switch places with someone here in the bunker. Gasp!',\n  lft8: 'fled to the north and created a new society where is considered a God.',\n  lft9: 'found the cure for the pandemic, healed the world, and never told you people about it',\n  lft10: 'join the wastelanders, and soon became their leader',\n  lft11: 'simply disappeard',\n  lft12: 'cried',\n  lft13: 'found love and lived a long life',\n  lft14: 'is happy now',\n  lft15: 'died of the virus',\n  lft16: 'died of the virus',\n  lft17: 'died of the virus',\n  lft18: 'died of the virus',\n  lft19: 'died of the virus',\n  lft20: 'died of the virus',\n};\n","import {\n  ONE_MINUTE,\n  ONLINE_MINIUTE_THRESHOLD,\n  TURN_TYPES_FLAVOR_TEXT,\n  LOSER_FLAVOR_TEXT,\n} from './contants';\nimport QUESTIONS from './questions.json';\n\n/**\n * Generates a 4-digit game ID\n * @returns {string}\n */\nexport const generateID = () => {\n  const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  let id = '';\n\n  while (id.length < 4) {\n    id += LETTERS[Math.floor(Math.random() * LETTERS.length)];\n  }\n\n  return id;\n};\n\n/**\n * Shuffles list returning a new shuffled instance\n * @param {array} list\n * @returns {array}\n */\nexport const shuffle = (list) => {\n  const res = [...list];\n  res.sort(() => Math.random() - 0.5);\n  return res;\n};\n\n/**\n * Get n number of items from an array\n * @param {array} list the array where items should be fetched from\n * @param {number} quantity the number of items to be returned\n * @returns {array}\n */\nexport const getRandomItems = (list, quantity) => {\n  const shuffledList = shuffle(list);\n  const res = new Array(quantity).fill(null);\n  for (let i = 0; i < res.length; i++) {\n    const item = shuffledList[i];\n    res[i] = item;\n  }\n  return res;\n};\n\n/**\n * Gets random item from list of items\n * @param {array} items the list of items\n * @returns {any} a random item from list of items\n */\nexport const getRandomItem = (items) => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n\n/**\n * Determines if current timestamp is considered online\n * @param {number} timestamp\n * @returns {boolean}\n */\nexport const isOnline = (timestamp) =>\n  Date.now() - timestamp < ONE_MINUTE * ONLINE_MINIUTE_THRESHOLD;\n\n/**\n * Outputs a random number within range\n * @param {number} min the start of the range (default 1)\n * @param {number} max the end of the range (default 10)\n * @returns {number}\n */\nexport const randomNumber = (min = 1, max = 10) => Math.floor(Math.random() * (max - min) + min);\n\n/**\n * Returns a turn type number based of the turn\n * @param {number} turn the current turn\n * @returns {number} a turn type number (0, 1, 2, 3)\n */\nexport const getTurnType = (turn) => {\n  if (turn < 4) return 1;\n\n  if (turn < 6) return getRandomItems([1, 1, 1, 1, 1, 2, 2, 0], 1)[0];\n\n  return getRandomItems([0, 1, 2, 2, 3, 3], 1)[0];\n};\n\n/**\n * Returns a random flavor text for the round\n * @param {number} turnType the current turn type\n * @param {number} turn the current turn\n * @return {string} the flavor text\n */\nexport const getTurnTypeFlavorText = (turnType, turn) => {\n  const flavorTexts = TURN_TYPES_FLAVOR_TEXT[turnType];\n  return flavorTexts[(turn - 1) % flavorTexts.length];\n};\n\n/**\n * Selects 4 random unique questions\n * @param {object} usedQuestions an object containing questions previously used\n * @returns array with the selected questions\n */\nexport const getUniqueQuestions = (usedQuestions) => {\n  const selectedQuestions = {};\n\n  while (Object.keys(selectedQuestions).length !== 4) {\n    const currentQuestion = getRandomItem(Object.values(QUESTIONS));\n\n    // Use question only if it has not been used or selected yet\n    if (!usedQuestions[currentQuestion.id] && !selectedQuestions[currentQuestion.id]) {\n      selectedQuestions[currentQuestion.id] = currentQuestion;\n    }\n  }\n  return Object.values(selectedQuestions);\n};\n\n/**\n * Gets the question from the questions json file that matches given id\n * @param {string} questionID the unique question id\n * @returns {object} the question object with question, id, and answers\n */\nexport const getQuestion = (questionID) => {\n  return QUESTIONS[questionID];\n};\n\n/**\n * Cheaply deep copyes object\n * @param {object} obj\n * @returns deep copied object\n */\nexport const deepCopy = (obj) => {\n  return JSON.parse(JSON.stringify(obj));\n};\n\n/**\n * Shuffled flavor texts ids\n * @param {*} list\n * @param {*} cache\n * @returns\n */\n\nexport const shuffledFlavorTextsIDs = (function () {\n  return shuffle(Object.keys(LOSER_FLAVOR_TEXT));\n})();\n","import { shuffle, getRandomItems } from '../utils';\nimport { AVATARS, GAME_PHASES, ONE_MINUTE, TEST_NOW } from '../utils/contants';\n\nconst playersNames = [\n  'Adam',\n  'Beth',\n  'Cam',\n  'Danny',\n  'Evan',\n  'Fred',\n  'Gabi',\n  'Helen',\n  'Ian',\n  'Jack',\n  'Kelly',\n  'Lin',\n];\n\nif (process.env.NODE_ENV === 'test') {\n  playersNames[0] = 'Tester';\n}\n\nexport const getAnswers = (nickname) => {\n  const answers = getRandomItems(\n    ['keys', 'money', 'coin', 'coins', 'hand', 'wallet', 'clips', 'lint', 'fabric'],\n    3\n  );\n\n  return answers.reduce((acc, answer, index) => {\n    const id = `q1;${nickname};${index}`;\n    acc[id] = {\n      text: answer.toUpperCase(),\n      isMatch: false,\n    };\n    return acc;\n  }, {});\n};\n\nexport const getPlayers = ({\n  number,\n  floor = 6,\n  isReady = false,\n  addAnswers = false,\n  isOnline = true,\n  scores,\n}) => {\n  const result = {};\n\n  for (let i = 0; i < number; i++) {\n    result[playersNames[i]] = {\n      avatar: AVATARS[i],\n      isAdmin: i === 0,\n      lastUpdated: isOnline ? TEST_NOW : TEST_NOW - ONE_MINUTE * 300,\n      nickname: playersNames[i],\n      floor: typeof floor === 'number' ? floor : floor[i] || 6,\n      isReady: Array.isArray(isReady) ? isReady[i] || false : isReady,\n      score: scores ? scores[i] || 0 : 0,\n      answers: addAnswers ? getAnswers(playersNames[i]) : {},\n    };\n  }\n  return result;\n};\n\nexport const basics = {\n  gameID: 'ABCD',\n  avatars: [...AVATARS],\n  phase: GAME_PHASES.WAITING_ROOM,\n  turn: 0,\n  isLocked: true,\n  gameOver: false,\n  floorBlockers: {\n    1: true,\n    2: true,\n    3: true,\n  },\n};\n\nconst mockTurns = (set) => {\n  let players;\n\n  switch (set) {\n    case 'waiting.incomplete':\n      return {\n        ...basics,\n        players: getPlayers({ number: 2 }),\n        isLocked: false,\n      };\n    case 'waiting.sufficient':\n      return {\n        ...basics,\n        players: getPlayers({ number: 4 }),\n        isLocked: false,\n      };\n    case 'waiting.full':\n      return {\n        ...basics,\n        players: getPlayers({ number: 12 }),\n        isLocked: false,\n      };\n    case 'announcement':\n      players = getPlayers({\n        number: 12,\n        floor: [6, 6, 6, 6, 6, 5, 4, 4, 6, 2, 2, 6],\n        isReady: [false, true, true, true],\n      });\n      return {\n        ...basics,\n        phase: GAME_PHASES.ANNOUNCEMENT,\n        turn: 1,\n        turnType: 1,\n        players,\n        turnOrder: shuffle(Object.keys(players)),\n      };\n    case 'announcement.ready':\n      players = getPlayers({\n        number: 12,\n        floor: [6, 6, 6, 6, 6, 5, 4, 4, 6, 2, 2, 6],\n        isReady: true,\n      });\n      return {\n        ...basics,\n        phase: GAME_PHASES.ANNOUNCEMENT,\n        turn: 1,\n        turnType: 1,\n        players,\n        floorBlockers: { 1: true, 2: true, 3: false },\n        turnOrder: shuffle(Object.keys(players)),\n      };\n    case 'question.active':\n      players = getPlayers({\n        number: 12,\n        floor: 6,\n        isReady: true,\n      });\n      return {\n        ...basics,\n        phase: GAME_PHASES.QUESTION,\n        turn: 1,\n        turnType: 1,\n        players,\n        turnOrder: [...playersNames],\n      };\n    case 'question.passive':\n      players = getPlayers({\n        number: 12,\n        floor: 6,\n        isReady: true,\n      });\n      return {\n        ...basics,\n        phase: GAME_PHASES.QUESTION,\n        turn: 1,\n        turnType: 1,\n        players,\n        turnOrder: [...playersNames].reverse(),\n      };\n    case 'answer.ready':\n      players = getPlayers({\n        number: 12,\n        floor: 6,\n        isReady: true,\n        addAnswers: true,\n      });\n      return {\n        ...basics,\n        currentQuestionID: 'q1',\n        phase: GAME_PHASES.ANSWER,\n        turn: 1,\n        turnType: 1,\n        players,\n        turnOrder: [...playersNames],\n      };\n    case 'answer.ready3':\n      players = getPlayers({\n        number: 3,\n        floor: 6,\n        isReady: true,\n        addAnswers: true,\n      });\n      return {\n        ...basics,\n        currentQuestionID: 'q1',\n        phase: GAME_PHASES.ANSWER,\n        turn: 1,\n        turnType: 1,\n        players,\n        turnOrder: [...playersNames].slice(0, 3),\n      };\n    case 'answer.ready4':\n      players = getPlayers({\n        number: 4,\n        floor: 6,\n        isReady: true,\n        addAnswers: true,\n      });\n      return {\n        ...basics,\n        currentQuestionID: 'q1',\n        phase: GAME_PHASES.ANSWER,\n        turn: 1,\n        turnType: 1,\n        players,\n        turnOrder: [...playersNames].slice(0, 4),\n      };\n    case 'compare.ready':\n      players = getPlayers({\n        number: 4,\n        floor: 5,\n        isReady: [false, true, true, true],\n        addAnswers: true,\n        score: [5, 3, 6, 4],\n      });\n      return {\n        ...basics,\n        currentQuestionID: 'q1',\n        phase: GAME_PHASES.COMPARE,\n        turn: 1,\n        turnType: 1,\n        players,\n        turnOrder: [...playersNames].slice(0, 4),\n      };\n    case 'compare.result.animation':\n      players = getPlayers({\n        number: 12,\n        floor: [6, 6, 6, 6, 6, 6, 5, 4, 4, 3, 2, 1],\n        isReady: [false, true, true, true, true, true, true, true, true, true, true, true],\n        addAnswers: true,\n        score: [5, 1, 6, 1, 5, 5, 7, 7, 1, 1, 5, 1],\n      });\n      return {\n        ...basics,\n        currentQuestionID: 'q1',\n        phase: GAME_PHASES.COMPARE,\n        turn: 1,\n        turnType: 0,\n        players,\n        turnOrder: [...playersNames],\n        floorBlockers: { 1: false, 2: false, 3: true }, // not possible, only to check anymation\n      };\n    case 'result':\n      players = getPlayers({\n        number: 12,\n        floor: [6, 6, 6, 6, 6, 6, 5, 4, 4, 3, 2, 1],\n        isReady: [false, true, true, true, true, true, true, true, true, true, true, true],\n        addAnswers: true,\n        score: [5, 1, 6, 1, 5, 5, 7, 7, 1, 1, 5, 1],\n      });\n      return {\n        ...basics,\n        currentQuestionID: 'q1',\n        phase: GAME_PHASES.RESULT,\n        turn: 1,\n        turnType: 0,\n        players,\n        turnOrder: [...playersNames],\n        floorBlockers: { 1: false, 2: false, 3: true }, // not possible, only to check anymation\n        result: [\n          null,\n          {\n            Lin: {\n              action: 'GAME_OVER',\n              flavorTextID: 'lft16',\n              from: 1,\n              name: 'Lin',\n              score: 0,\n              to: 0,\n            },\n          },\n          {\n            Kelly: {\n              action: 'MOVE_UP',\n              from: 2,\n              name: 'Kelly',\n              score: 0,\n              to: 1,\n            },\n          },\n          {\n            Jack: {\n              action: 'SAVE',\n              from: 3,\n              name: 'Jack',\n              score: 0,\n              to: 3,\n            },\n          },\n          {\n            Helen: {\n              action: 'MOVE_UP',\n              from: 4,\n              name: 'Helen',\n              score: 0,\n              to: 3,\n            },\n            Ian: {\n              action: 'MOVE_UP',\n              from: 4,\n              name: 'Ian',\n              score: 0,\n              to: 3,\n            },\n          },\n          {\n            Gabi: {\n              action: 'MOVE_UP',\n              from: 5,\n              name: 'Gabi',\n              score: 0,\n              to: 4,\n            },\n          },\n          {\n            Adam: {\n              action: 'STAY',\n              from: 6,\n              name: 'Adam',\n              score: 1,\n              to: 6,\n            },\n            Beth: {\n              action: 'MOVE_UP',\n              from: 6,\n              name: 'Beth',\n              score: 0,\n              to: 5,\n            },\n            Cam: {\n              action: 'MOVE_UP',\n              from: 6,\n              name: 'Cam',\n              score: 0,\n              to: 5,\n            },\n            Danny: {\n              action: 'MOVE_UP',\n              from: 6,\n              name: 'Danny',\n              score: 0,\n              to: 5,\n            },\n            Evan: {\n              action: 'MOVE_UP',\n              from: 6,\n              name: 'Evan',\n              score: 0,\n              to: 5,\n            },\n            Fred: {\n              action: 'MOVE_UP',\n              from: 6,\n              name: 'Fred',\n              score: 0,\n              to: 5,\n            },\n          },\n        ],\n        gameOver: true,\n      };\n    default:\n      return {\n        ...basics,\n      };\n  }\n};\n\nexport default mockTurns;\n","import React, { useEffect } from 'react';\n\nimport API from '../firebase';\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport { DISCONNECT_MINIUTE_THRESHOLD, GAME_PHASES, ONE_MINUTE, SCREENS } from '../utils/contants';\nimport toastService from '../utils/toastService';\n\nimport GameWaitingRoom from './GameWaitingRoom';\nimport GameAnnouncement from './GameAnnouncement';\nimport GameQuestion from './GameQuestion';\nimport GameAnswer from './GameAnswer';\nimport GameCompare from './GameCompare';\nimport GameResult from './GameResult';\nimport GameOver from './GameOver';\n\nlet disconnectInterval;\n\nconst GameScreen = () => {\n  const [game] = useGlobalState('game');\n\n  switch (game.phase) {\n    case GAME_PHASES.WAITING_ROOM:\n      return <GameWaitingRoom />;\n    case GAME_PHASES.ANNOUNCEMENT:\n      return <GameAnnouncement />;\n    case GAME_PHASES.QUESTION:\n      return <GameQuestion />;\n    case GAME_PHASES.ANSWER:\n      return <GameAnswer />;\n    case GAME_PHASES.COMPARE:\n      return <GameCompare />;\n    case GAME_PHASES.RESULT:\n      return <GameResult />;\n    case GAME_PHASES.GAME_OVER:\n      return <GameOver />;\n    default:\n      return <GameWaitingRoom justLoading />;\n  }\n};\n\nconst Game = () => {\n  // Global States\n  const [dbRef, setDbRef] = useGlobalState('dbRef');\n  const [game, setGame] = useGlobalState('game');\n  const [gameID, setGameID] = useGlobalState('gameID');\n  const [, setIsLoading] = useGlobalState('isLoading');\n  const [, setScreen] = useGlobalState('screen');\n  const [toast, setToast] = useGlobalState('toast');\n  const [lastUpdatedAt, setLastUpdatedAt] = useGlobalState('lastUpdatedAt');\n\n  // Create database reference\n  useEffect(() => {\n    if (game.gameID === null && gameID) {\n      setIsLoading(true);\n\n      API.ref()\n        .child('bunkermind')\n        .child(gameID)\n        .once('value', (snap) => {\n          if (snap.val()) {\n            const firebaseReference = API.ref().child('bunkermind').child(gameID);\n            gameEngine.setGameID(gameID);\n            setDbRef(gameEngine.setDbRef(firebaseReference));\n            setGame(gameEngine.update(snap.val()));\n          } else {\n            setGameID(null);\n            gameEngine.setGameID(null);\n            setToast(toastService.error(toast, 'Failed to start game session'));\n            setScreen(SCREENS.HOME);\n          }\n\n          setGame(gameEngine.state);\n          setIsLoading(false);\n        });\n    }\n  }, [game.gameID, gameID, setDbRef, setGame, setGameID, setIsLoading, setScreen, setToast, toast]);\n\n  useEffect(() => {\n    if (dbRef) {\n      const handleGameState = (snap) => {\n        setIsLoading(true);\n        if (snap.val()) {\n          setGame(gameEngine.update(snap.val()));\n          setLastUpdatedAt(Date.now());\n        }\n        setIsLoading(false);\n      };\n\n      dbRef.on('value', handleGameState);\n\n      const handleGameDisconnect = (snap) => {\n        setIsLoading(false);\n        setToast(toastService.info(toast, 'Server disconnected'));\n        setScreen(SCREENS.HOME);\n      };\n\n      return () => {\n        dbRef.off('value', handleGameDisconnect);\n      };\n    }\n  }, [dbRef, setGame, setIsLoading, setScreen, setToast, setLastUpdatedAt, toast]);\n\n  // Forces disconnect ater 15 minutes of inactivity\n  useEffect(() => {\n    clearInterval(disconnectInterval);\n\n    if (dbRef) {\n      disconnectInterval = setInterval(() => {\n        if (Date.now() - lastUpdatedAt > ONE_MINUTE * DISCONNECT_MINIUTE_THRESHOLD) {\n          dbRef.off('value', () => {\n            setIsLoading(false);\n            setToast(toastService.info(toast, 'Server disconnected for inactivity'));\n            setScreen(SCREENS.HOME);\n          });\n\n          clearInterval(disconnectInterval);\n        }\n      }, ONE_MINUTE * DISCONNECT_MINIUTE_THRESHOLD);\n    }\n  }, [lastUpdatedAt, setIsLoading, setToast, setScreen, dbRef, toast]);\n\n  return <GameScreen />;\n};\n\nexport default Game;\n","import { deepCopy, getTurnType, shuffle, shuffledFlavorTextsIDs } from './utils';\nimport {\n  AVATARS,\n  GAME_PHASES,\n  ONE_MINUTE,\n  ONLINE_MINIUTE_THRESHOLD,\n  TEST_NOW,\n  ENGINE_TIMEOUT,\n  RESULT_ACTION,\n} from './utils/contants';\n\nimport mockTurns from './firebase/mock-turns';\n\nexport class GameEngine {\n  constructor() {\n    this._dbRef = null;\n    this._isAdmin = false;\n    this.me = null;\n\n    // Saved on Firebase\n    this.gameID = null;\n    this.avatars = [];\n    this.players = {};\n    this.isLocked = false;\n    this.turnOrder = [];\n    this.turn = 0;\n    this.turnType = 1;\n    this.phase = GAME_PHASES.NONE;\n    this.usedQuestions = {};\n    this.currentQuestionID = null;\n    this.answersSet = [];\n    this.compare = null;\n    this.floorBlockers = {\n      1: true,\n      2: true,\n      3: true,\n    };\n    this.result = {};\n    this.gameOver = false;\n\n    // Used by delay save\n    this._interval = null;\n    this._tempSaveObj = null;\n  }\n\n  // GETTERS\n\n  /**\n   * State to be used by the game global state\n   * @type  {string}\n   */\n  get state() {\n    return {\n      gameID: this.gameID,\n      players: this.players,\n      isLocked: this.isLocked,\n      turnOrder: this.turnOrder,\n      turn: this.turn,\n      phase: this.phase,\n      turnType: this.turnType,\n      currentQuestionID: this.currentQuestionID,\n      usedQuestions: this.usedQuestions,\n      answersSet: this.answersSet,\n      compare: this.compare,\n      floorBlockers: this.floorBlockers,\n      result: this.result,\n      gameOver: this.gameOver,\n    };\n  }\n\n  /**\n   * Return active player object based on turn and turnOrder\n   * @returns  {object}\n   */\n  get activePlayer() {\n    const index = (this.turn - 1) % this.turnOrder.length;\n    return this.players[this.turnOrder[index]];\n  }\n\n  /**\n   * Flag indicating if every player is online\n   * @type  {boolean}\n   */\n  get isEveryoneOnline() {\n    return Boolean(\n      Object.keys(this.players).length &&\n        Object.values(this.players).every(\n          (p) => this.now - p.lastUpdated < ONE_MINUTE * ONLINE_MINIUTE_THRESHOLD\n        )\n    );\n  }\n\n  /**\n   * Flag indicating if every player is ready (and online)\n   * @returns  {boolean}\n   */\n  get isEveryoneReady() {\n    return this.isEveryoneOnline && Object.values(this.players).every((p) => p.isReady);\n  }\n\n  /**\n   * Flag indicating if game has already two players set\n   * @returns  {boolean}\n   */\n  get isGameFull() {\n    return !this.isUserSet && Object.keys(this.players).length === 12;\n  }\n\n  /**\n   * Flag indicating if user is the active player\n   * @returns  {boolean}\n   */\n  get isUserActivePlayer() {\n    return this.me === this.activePlayer?.nickname;\n  }\n\n  /**\n   * Flag indicating if player is online\n   * @returns  {boolean}\n   */\n  get isUserOnline() {\n    return (\n      this.isUserSet && this.now - this.user.lastUpdated < ONE_MINUTE * ONLINE_MINIUTE_THRESHOLD\n    );\n  }\n\n  /**\n   * Flag indicating if me property is set and included in players\n   * @returns  {boolean}\n   */\n  get isUserSet() {\n    return Boolean(this.me && this.players[this.me]);\n  }\n\n  /**\n   * Flag indicating if player is ready\n   * @returns  {boolean}\n   */\n  get isUserReady() {\n    return Boolean(this.players[this.me]?.isReady);\n  }\n\n  /**\n   * Return the name of players with GAME_OVER action from result object\n   * @returns {array}\n   */\n  get losers() {\n    return this.flatOrderResults.reduce((acc, player) => {\n      if (player.action === RESULT_ACTION.GAME_OVER) {\n        acc.push({\n          name: player.name,\n          flavorTextID: player.flavorTextID,\n        });\n      }\n      return acc;\n    }, []);\n  }\n\n  /**\n   * Returns current time in miliseconds\n   * @returns {number}\n   */\n  get now() {\n    return process.env.NODE_ENV === 'test' ? TEST_NOW : Date.now();\n  }\n\n  /**\n   * Order restuls based on their result action\n   * @returns {object}\n   */\n  get orderedResults() {\n    // For each floor, order by user first, game-over, move up, move down, save, then stay\n\n    return Object.entries(this.result).reduce((acc, [key, floorObj]) => {\n      if (Object.keys(floorObj).length < 1) {\n        acc[key] = [];\n        return acc;\n      }\n\n      const orderedFloorObj = {\n        me: [],\n        [RESULT_ACTION.GAME_OVER]: [],\n        [RESULT_ACTION.MOVE_UP]: [],\n        [RESULT_ACTION.MOVE_DOWN]: [],\n        [RESULT_ACTION.SAVE]: [],\n        [RESULT_ACTION.STAY]: [],\n      };\n\n      Object.values(floorObj).forEach((playerResult) => {\n        if (playerResult.name === this.me) {\n          return orderedFloorObj.me.push(playerResult);\n        }\n\n        return orderedFloorObj[playerResult.action].push(playerResult);\n      });\n\n      acc[key] = [\n        ...orderedFloorObj.me,\n        ...orderedFloorObj[RESULT_ACTION.GAME_OVER],\n        ...orderedFloorObj[RESULT_ACTION.MOVE_UP],\n        ...orderedFloorObj[RESULT_ACTION.MOVE_DOWN],\n        ...orderedFloorObj[RESULT_ACTION.SAVE],\n        ...orderedFloorObj[RESULT_ACTION.STAY],\n      ];\n\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Returns a flat array of values of the orderResults\n   * @returns {array}\n   */\n  get flatOrderResults() {\n    return Object.values(this.orderedResults).flat();\n  }\n\n  /**\n   * Returns indication of what blockers were recently removed\n   * @returns {object}\n   */\n  get blockerState() {\n    const bState = { ...this.floorBlockers };\n\n    this.flatOrderResults.forEach((res) => {\n      if (res.action === RESULT_ACTION.SAVE) {\n        bState[res.from] = 'removed';\n      }\n    });\n\n    return bState;\n  }\n\n  /**\n   * Gets user (me) from the live players object\n   * @returns {object}\n   */\n  get user() {\n    return this.players[this.me];\n  }\n\n  /**\n   * Get user's answers\n   * @returns  {object}\n   */\n  get userAnswers() {\n    return this.players[this.me]?.answers || {};\n  }\n\n  /**\n   * Get user answer in the compare matches object\n   * @returns {object}\n   */\n  get userCompareMatchingAnswer() {\n    return this.compare?.matches?.[this.me];\n  }\n\n  /**\n   * Get every player that is ready\n   * @returns  {array}\n   */\n  get whosReady() {\n    return Object.values(this.players).filter((p) => p.isReady);\n  }\n\n  // DYNAMIC GETTER\n\n  /**\n   * Gets given players avatar\n   * @param {string} playerNickname\n   * @returns {string} the avatar\n   */\n  getPlayerAvatar(playerNickname) {\n    return this.players[playerNickname].avatar;\n  }\n\n  // MAIN METHODS\n\n  init(gameID) {\n    this.gameID = gameID;\n    this._isAdmin = true;\n\n    this.setup();\n\n    return {\n      gameID: this.gameID,\n      avatars: this.avatars,\n    };\n  }\n\n  setup() {\n    // Define avatars for players\n    this.avatars = shuffle(AVATARS);\n  }\n\n  delaySave() {\n    if (!this._interval) {\n      this._interval = setInterval(() => {\n        if (this._dbRef) {\n          this.save({ ...this._tempSaveObj });\n          this._tempSaveObj = null;\n          clearInterval(this._interval);\n        }\n      }, 1000);\n    } else {\n      console.warn(\"There's already a save interval running\");\n    }\n  }\n\n  save(dataObj = {}) {\n    if (!this._dbRef) {\n      this.print('Delaying save...');\n      this._tempSaveObj = dataObj;\n      return this.delaySave();\n    }\n\n    this.print('Saving...', dataObj);\n\n    this._dbRef.update({\n      ...dataObj,\n      lastUpdatedBy: this.me,\n    });\n\n    if (this.me) {\n      this._dbRef.child('players').child(this.me).update({\n        lastUpdated: this.now,\n      });\n    }\n  }\n\n  update(data) {\n    this.print(`Updating game (by ${data.lastUpdatedBy})...`, data);\n\n    this.gameID = data.gameID;\n    this.avatars = data.avatars || [];\n    this.players = data.players || {};\n    this.isLocked = data.isLocked || false;\n    this.turnOrder = data.turnOrder || [];\n    this.turn = data.turn;\n    this.turnType = data.turnType;\n    this.phase = data.phase;\n    this.currentQuestionID = data.currentQuestionID || null;\n    this.usedQuestions = data.usedQuestions || {};\n    this.answersSet = data.answersSet || [];\n    this.compare = data.compare || null;\n    this.floorBlockers = data.floorBlockers;\n    this.gameOver = data.gameOver;\n    this.result = data.result ? this.extendResult(data.result) : {};\n\n    return this.state;\n  }\n\n  reset() {\n    this._dbRef = null;\n    this._isAdmin = false;\n    this.me = null;\n    this.gameID = null;\n    this.avatars = [];\n    this.players = {};\n    this.isLocked = false;\n    this.turnOrder = [];\n    this.turn = 0;\n    this.turnType = 1;\n    this.phase = GAME_PHASES.NONE;\n    this.usedQuestions = {};\n    this.currentQuestionID = null;\n    this.answersSet = [];\n    this.compare = null;\n    this._interval = null;\n    this._tempSaveObj = null;\n    this.floorBlockers = {\n      1: true,\n      2: true,\n      3: true,\n    };\n    this.result = {};\n    this.gameOver = false;\n  }\n\n  deleteGame() {\n    this.reset();\n\n    this._dbRef().set({\n      gameID: this.gameID,\n    });\n  }\n\n  // SETTERS\n\n  /**\n   * Sets the the firebase reference\n   * @param {object} dbRef firebase database reference\n   * @returns {object} the reference itself\n   */\n  setDbRef(dbRef) {\n    if (!this._dbRef) {\n      this._dbRef = dbRef;\n    }\n    return this._dbRef;\n  }\n\n  /**\n   * Sets the game ID\n   * @param {string} gameID four-digit unique id\n   */\n  setGameID(gameID) {\n    this.gameID = gameID;\n  }\n\n  /**\n   * Turns every every player isReady flag off\n   */\n  unReadyPlayers() {\n    Object.values(this.players).forEach((player) => {\n      player.isReady = false;\n    });\n  }\n\n  // SAVERS\n\n  /**\n   * Pulls or saves a new player instance to database\n   * @param {string} nickname the nickname of the user\n   */\n  setPlayer(nickname) {\n    // Set me\n    this.me = nickname;\n\n    // Define new player\n    let newPlayer;\n    if (this.players[nickname]) {\n      newPlayer = {\n        ...this.players[nickname],\n        lastUpdated: this.now,\n      };\n    } else {\n      newPlayer = {\n        lastUpdated: this.now,\n        nickname,\n        avatar: this.avatars[Object.keys(this.players).length],\n        floor: 6,\n        isReady: false,\n        score: 0,\n        answers: {},\n      };\n\n      if (this._isAdmin) {\n        newPlayer.isAdmin = true;\n      }\n    }\n\n    if (this.isGameFull) {\n      throw Error('Game is full, try a different game ID');\n    }\n\n    if (!this.players[nickname] && this.isLocked) {\n      throw Error('Game is locked, you can not join this time');\n    }\n\n    this.print('Adding player...');\n\n    this._dbRef.child('players').update({\n      [nickname]: newPlayer,\n    });\n  }\n\n  /**\n   * Locks games and take users to announcement\n   */\n  lockAndStart() {\n    this.save({\n      turnOrder: shuffle(Object.keys(this.players)),\n      phase: GAME_PHASES.ANNOUNCEMENT,\n      isLocked: true,\n      turn: 1,\n      turnType: 1,\n    });\n  }\n\n  /**\n   * Saves new typestamp to player/user\n   */\n  refresh() {\n    if (!this.isUserOnline && this.me) {\n      this.print('Refreshing player...');\n\n      this._dbRef.child('players').child(this.me).update({\n        lastUpdated: this.now,\n      });\n    }\n  }\n\n  /**\n   * Set user/player's isReady to true with new timestamp\n   */\n  setUserReady() {\n    if (this.me) {\n      this.print('Reading player...');\n\n      this._dbRef.child('players').child(this.me).update({\n        isReady: true,\n        lastUpdated: this.now,\n      });\n\n      setTimeout(() => {\n        // If everybody is ready, trigger next phase\n        if (this.isEveryoneReady && this.phase !== GAME_PHASES.QUESTION) {\n          this.goToQuestionPhase();\n        }\n      }, ENGINE_TIMEOUT);\n    }\n  }\n\n  goToQuestionPhase() {\n    this.print('Going to QUESTION phase...');\n\n    this.save({\n      phase: GAME_PHASES.QUESTION,\n      lastUpdatedBy: this.me,\n    });\n  }\n\n  goToAnswerPhase(questionID) {\n    this.print('Going to ANSWER phase...');\n\n    this.unReadyPlayers();\n\n    this.save({\n      lastUpdatedBy: this.me,\n      phase: GAME_PHASES.ANSWER,\n      currentQuestionID: questionID,\n      usedQuestions: {\n        ...this.usedQuestions,\n        [questionID]: true,\n      },\n      players: this.players,\n    });\n  }\n\n  submitAnswers(answers) {\n    if (this.me) {\n      // Set answers, uppercase\n      const userAnswers = answers.reduce((acc, answer, index) => {\n        const id = `${this.currentQuestionID};${this.me};${index}`;\n        acc[id] = {\n          text: answer.toUpperCase(),\n          isMatch: false,\n        };\n        return acc;\n      }, {});\n\n      this._dbRef.child('players').child(this.me).update({\n        isReady: true,\n        lastUpdated: this.now,\n        answers: userAnswers,\n      });\n\n      setTimeout(() => {\n        // If everybody is ready, trigger next phase\n        if (this.isEveryoneReady && this.phase !== GAME_PHASES.COMPARE) {\n          this.goToComparePhase();\n        }\n      }, ENGINE_TIMEOUT);\n    }\n  }\n\n  goToComparePhase() {\n    this.print('Going to COMPARE phase...');\n\n    this.answersSet = [\n      ...new Set(\n        Object.values(this.players)\n          .map((player) => Object.values(player.answers).map((answer) => answer.text))\n          .flat()\n          .sort()\n          .reverse()\n      ),\n    ];\n\n    this.save({\n      lastUpdatedBy: this.me,\n      phase: GAME_PHASES.COMPARE,\n      answersSet: this.answersSet,\n    });\n\n    setTimeout(() => {\n      // After a second, prepare\n      this.prepareCompare();\n    }, ENGINE_TIMEOUT);\n  }\n\n  prepareCompare() {\n    // Unready players\n    this.unReadyPlayers();\n\n    // Get currentAnswer\n    const currentAnswer = this.answersSet.pop();\n\n    const matches = {};\n\n    // Auto-match all users\n    Object.values(this.players).forEach((player) =>\n      Object.entries(player.answers).forEach(([answerId, answer]) => {\n        if (answer.text === currentAnswer) {\n          matches[player.nickname] = {\n            answer: answer.text,\n            isLocked: true,\n            answerId,\n          };\n          // Mark as matched in the player object\n          answer.isMatch = true;\n        }\n      })\n    );\n\n    this.save({\n      lastUpdatedBy: this.me,\n      phase: GAME_PHASES.COMPARE,\n      players: this.players,\n      answersSet: this.answersSet,\n      compare: {\n        currentAnswer,\n        matches,\n      },\n    });\n  }\n\n  addMatch(id, nickname) {\n    // Mark player answer as match\n    this.players[nickname].answers[id].isMatch = true;\n\n    const [, name] = id.split(';');\n\n    // Add player answer to compare.matches\n    this.compare.matches[name] = {\n      answer: this.userAnswers[id].text,\n      isLocked: false,\n      downvotes: {\n        [name]: true,\n      },\n      answerId: id,\n    };\n\n    const userAnswersCopy = deepCopy(this.userAnswers);\n\n    // Save\n    this.save({\n      lastUpdatedBy: this.me,\n      compare: this.compare,\n      players: this.players,\n    });\n\n    this._dbRef.child('players').child(name).update({\n      lastUpdated: this.now,\n      answers: userAnswersCopy,\n    });\n  }\n\n  removeMatch(id, nickname) {\n    // Mark player answer as NOT match\n    this.players[nickname].answers[id].isMatch = false;\n\n    const [, name] = id.split(';');\n\n    // Remove player answer to compare.matches\n    this.compare.matches[name] = {};\n    const userAnswersCopy = deepCopy(this.userAnswers);\n\n    // Save\n    this.save({\n      lastUpdatedBy: this.me,\n      compare: this.compare,\n    });\n\n    this._dbRef.child('players').child(name).update({\n      lastUpdated: this.now,\n      answers: userAnswersCopy,\n    });\n  }\n\n  voteForAnswer(id, voterName) {\n    if (this.compare.matches[id]) {\n      if (this.compare.matches[id].downvotes[voterName]) {\n        delete this.compare.matches[id].downvotes[voterName];\n      } else {\n        this.compare.matches[id].downvotes[voterName] = true;\n      }\n    }\n\n    // Save\n    this.save({\n      lastUpdatedBy: this.me,\n      compare: this.compare,\n    });\n  }\n\n  doneComparing() {\n    this._dbRef.child('players').child(this.me).update({\n      isReady: true,\n      lastUpdated: this.now,\n    });\n\n    setTimeout(() => {\n      // If everybody is ready, run score then (prepare or results)\n      if (this.isEveryoneReady && this.phase === GAME_PHASES.COMPARE) {\n        this.score();\n      }\n    }, ENGINE_TIMEOUT);\n  }\n\n  score() {\n    // Build invalid dictionary\n    const invalidDict = Object.values(this.compare.matches).reduce((acc, matchEntry) => {\n      const numPlayers = Object.keys(this.players).length;\n      const numDownvotes = Object.keys(matchEntry?.downvotes || {}).length;\n\n      if (!matchEntry.isLocked && numDownvotes / numPlayers > 0.4) {\n        acc[matchEntry.answer] = true;\n      }\n\n      return acc;\n    }, {});\n\n    // Reset any player that has more than 30% of players downvoted\n    Object.entries(this.compare.matches).forEach(([playerName, matchEntry]) => {\n      if (invalidDict[matchEntry.answer]) {\n        // Dis-match\n        this.players[playerName].answers[matchEntry.answerId].isMatch = false;\n        // Remove from matches\n        delete this.compare.matches[playerName];\n      } else {\n        // Remove any non exact macthes that were accepted from answersSet\n        const toRemoveIndex = this.answersSet.findIndex((a) => a === matchEntry.answer);\n        if (toRemoveIndex > -1) {\n          this.answersSet[toRemoveIndex] = undefined;\n        }\n      }\n    });\n\n    // Score\n    const totalPointsForAnswer = Object.keys(this.compare.matches).length;\n\n    Object.keys(this.compare.matches).forEach((playerName) => {\n      this.players[playerName].score += totalPointsForAnswer;\n    });\n\n    // Reset set\n    this.answersSet = this.answersSet.filter((a) => a);\n\n    // Save\n    this.save({\n      lastUpdatedBy: this.me,\n      players: this.players,\n      answersSet: this.answersSet,\n      compare: this.compare,\n    });\n\n    setTimeout(() => {\n      // Call prepare or result if no more words in set\n      if (this.answersSet.length > 0) {\n        this.prepareCompare();\n      } else {\n        this.turnResult();\n      }\n    }, ENGINE_TIMEOUT);\n  }\n\n  turnResult() {\n    // Split players into groups by score\n    const tiers = Object.values(this.players)\n      .reduce((tiersAcc, player) => {\n        if (tiersAcc[player.score] === undefined) {\n          tiersAcc[player.score] = [];\n        }\n        tiersAcc[player.score].push(player);\n\n        return tiersAcc;\n      }, [])\n      .filter((entry) => entry);\n\n    // Create result object\n    const result = {\n      1: {},\n      2: {},\n      3: {},\n      4: {},\n      5: {},\n      6: {},\n    };\n\n    let isGameOver = false;\n\n    const floorBlockersCopy = { ...this.floorBlockers };\n    const newFloorBlockers = { ...this.floorBlockers };\n    const highestScoreIndex = tiers.length - 1;\n\n    class PlayerResult {\n      constructor(name, score, from, to, savedByBlocker = false) {\n        this.name = name;\n        this.score = score;\n        this.from = from;\n        this.to = to;\n        this.action = null;\n      }\n    }\n\n    function moveUp(player, index) {\n      const saved = floorBlockersCopy[player.floor];\n      // Remove blocker if used(saved)\n      if (saved) {\n        newFloorBlockers[player.floor] = false;\n      }\n      const to = saved ? player.floor : player.floor - 1;\n\n      const entry = new PlayerResult(player.nickname, player.score, player.floor, to, saved);\n\n      if (entry.to === 0) {\n        isGameOver = true;\n        entry.action = RESULT_ACTION.GAME_OVER;\n\n        entry.flavorTextID = shuffledFlavorTextsIDs[index];\n      } else if (entry.to === entry.from) {\n        entry.action = saved ? RESULT_ACTION.SAVE : RESULT_ACTION.STAY;\n      } else {\n        entry.action = RESULT_ACTION.MOVE_UP;\n      }\n\n      result[entry.from][entry.name] = { ...entry };\n    }\n\n    function moveDown(player) {\n      const to = player.floor === 6 ? player.floor : player.floor + 1;\n\n      const entry = new PlayerResult(player.nickname, player.score, player.floor, to);\n\n      if (entry.from === 6) {\n        entry.action = RESULT_ACTION.STAY;\n      } else {\n        entry.action = RESULT_ACTION.MOVE_DOWN;\n      }\n\n      result[entry.from][entry.name] = { ...entry };\n    }\n\n    tiers.forEach((tier, index) => {\n      // TurnType 0, move down (only when more than one tier)\n      if (this.turnType === 0 && tiers.length > 1 && highestScoreIndex === index) {\n        tier.forEach(moveDown);\n        return;\n      }\n\n      // Add lowest scores\n      if (index === 0 && highestScoreIndex !== index) {\n        tier.forEach(moveUp);\n        return;\n      }\n\n      // Add second lowest scores\n      if (this.turnType >= 2 && index === 1) {\n        tier.forEach(moveUp);\n        return;\n      }\n\n      // Add third lowest scores\n      if (this.turnType === 3 && index === 2) {\n        tier.forEach(moveUp);\n        return;\n      }\n\n      tier.forEach((player) => {\n        const entry = new PlayerResult(player.nickname, player.score, player.floor, player.floor);\n        entry.action = RESULT_ACTION.STAY;\n        result[entry.from][entry.name] = { ...entry };\n      });\n    });\n\n    this.unReadyPlayers();\n\n    // Save\n    this.save({\n      lastUpdatedBy: this.me,\n      players: this.players,\n      floorBlockers: newFloorBlockers,\n      result,\n      phase: GAME_PHASES.RESULT,\n      gameOver: isGameOver,\n    });\n  }\n\n  readyForNewTurn() {\n    if (this.me) {\n      this.print('Reading player for next round...');\n\n      this._dbRef.child('players').child(this.me).update({\n        isReady: true,\n        lastUpdated: this.now,\n      });\n\n      setTimeout(() => {\n        // If everybody is ready, trigger next phase\n        if (this.isEveryoneReady && this.phase !== GAME_PHASES.ANNOUNCEMENT) {\n          this.startNextTurn();\n        }\n      }, ENGINE_TIMEOUT);\n    }\n  }\n\n  startNextTurn() {\n    if (this.gameOver) {\n      this.save({\n        phase: GAME_PHASES.GAME_OVER,\n      });\n      return;\n    }\n\n    // Increase turn\n    const newTurn = this.turn + 1;\n    // Reset what needs to be reset\n    this.resetPlayersForRound();\n\n    this.save({\n      phase: GAME_PHASES.ANNOUNCEMENT,\n      turn: newTurn,\n      turnType: getTurnType(newTurn),\n      players: this.players,\n      currentQuestionID: '',\n      answersSet: {},\n      compare: {},\n      result: {},\n    });\n\n    // TO-DO; save all data somewhere\n  }\n\n  resetPlayersForRound() {\n    const getNewFloor = (playerName) => {\n      return this.flatOrderResults.find((res) => res.name === playerName).to;\n    };\n\n    Object.values(this.players).forEach((player) => {\n      player.isReady = false;\n      player.floor = getNewFloor(player.nickname);\n      player.score = 0;\n      player.answers = {};\n    });\n\n    console.log(Object.values(this.players).map((player) => player.answers));\n  }\n\n  // HELPERS\n\n  /**\n   * Ensures all 6 floors are present in the result object\n   * @param {object} resultObj\n   * @returns {object}\n   */\n  extendResult(resultObj) {\n    return {\n      1: {},\n      2: {},\n      3: {},\n      4: {},\n      5: {},\n      6: {},\n      ...resultObj,\n    };\n  }\n\n  /**\n   * Saves mock data to database\n   * @param {string} phase\n   */\n  mock(phase) {\n    this.print('Mocking...');\n    this.save(mockTurns(phase));\n  }\n\n  print(message, data = '') {\n    if (process.env.NODE_ENV === 'development') {\n      let color = 'LavenderBlush';\n      if (message.startsWith('Updating')) {\n        color = 'GreenYellow';\n      } else if (message.startsWith('Saving')) {\n        color = 'LightCoral';\n      } else if (message.startsWith('Going')) {\n        color = 'LightPink';\n      } else if (message.includes('player')) {\n        color = 'LightSalmon';\n      } else if (message.startsWith('Mock')) {\n        color = 'Orange';\n      }\n\n      console.log(`%c${message}`, `background:${color}`, data);\n    }\n  }\n}\n\nexport default new GameEngine();\n","import { createGlobalState } from 'react-hooks-global-state';\n\nimport GameEngine from './engine';\n\nimport { SCREENS } from './utils/contants';\n\nconst initialState = {\n  dbRef: null,\n  game: GameEngine.state,\n  gameID: null,\n  isLoading: false,\n  nickname: null,\n  screen: SCREENS.HOME,\n  toast: {\n    isVisible: false,\n    message: '',\n  },\n  lastUpdatedAt: Date.now(),\n};\n\nconst { useGlobalState } = createGlobalState(initialState);\n\nexport default useGlobalState;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst fb = firebase.initializeApp(config);\n\nexport default fb.database();\n","class LocalStorageService {\n  constructor() {\n    this.store = {\n      nickname: '',\n      gameID: '',\n    };\n    this.isLoaded = false;\n    this.appName = 'bunkermind';\n\n    this.init();\n  }\n\n  init() {\n    this.load();\n    return this.get();\n  }\n\n  get(key) {\n    if (!this.isLoaded) {\n      this.load();\n    }\n\n    if (key) {\n      return this.store[key] || null;\n    }\n\n    return this.store;\n  }\n\n  load() {\n    const localStorage = JSON.parse(window.localStorage.getItem(this.appName));\n\n    if (localStorage) {\n      this.store = localStorage;\n      this.isLoaded = true;\n    }\n  }\n\n  set(value) {\n    if (!this.isLoaded) {\n      this.load();\n    }\n\n    const type = typeof value;\n    if (type !== 'string' && type !== 'object') {\n      console.error('localStorage set value must be a string or a key-value object');\n      return;\n    }\n\n    // When value is a string, use as a property toggle\n    if (typeof value === 'string') {\n      this.store[value] = !this.store[value];\n    } else {\n      // Remove any null or undefined property\n      Object.entries(value).forEach(([key, item]) => {\n        if (item === null || item === undefined) {\n          delete value[key];\n        }\n      });\n\n      this.store = {\n        ...this.store,\n        ...value,\n      };\n    }\n\n    this.save();\n  }\n\n  save() {\n    if (this.notLoaded) {\n      this.load();\n    }\n\n    window.localStorage.setItem(this.appName, JSON.stringify(this.store));\n    this.load();\n  }\n\n  getDefaults() {\n    return [this.store.gameID, this.store.nickname];\n  }\n\n  setDefaults(gameID, nickname) {\n    this.set({\n      gameID,\n      nickname,\n    });\n  }\n\n  resetGameID() {\n    this.set({\n      nickname: this.store.nickname,\n      gameID: null,\n    });\n  }\n}\n\nexport default new LocalStorageService();\n","const toastService = {\n  error(toast, message) {\n    return { ...toast, isVisible: true, severity: 'error', message };\n  },\n  info(toast, message) {\n    return { ...toast, isVisible: true, severity: 'info', message };\n  },\n  success(toast, message) {\n    return { ...toast, isVisible: true, severity: 'success', message };\n  },\n  warning(toast, message) {\n    return { ...toast, isVisible: true, severity: 'warning', message };\n  },\n};\n\nexport default toastService;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport TextField from '@material-ui/core/TextField';\n\nimport logo from '../images/bunker-mind-logo.svg';\n\nimport API from '../firebase';\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport { generateID } from '../utils';\nimport { COLORS, SCREENS } from '../utils/contants';\nimport localStorageService from '../utils/localStorage';\nimport toastService from '../utils/toastService';\n\nconst Home = () => {\n  // Local Storage State\n  const [lsGameID, lsNickname] = localStorageService.getDefaults();\n  // Global States\n  const [gameID, setGameID] = useGlobalState('gameID');\n  const [isLoading, setIsLoading] = useGlobalState('isLoading');\n  const [nickname, setNickname] = useGlobalState('nickname');\n  const [, setScreen] = useGlobalState('screen');\n  const [toast, setToast] = useGlobalState('toast');\n  // Local States\n  const [errorGameID, setErrorGameID] = useState('');\n  const [isCreatingGame, setIsCreatingGame] = useState(false);\n  const [isValidGameID, setIsValidGameID] = useState(false);\n  const [isValidNickname, setIsValidNickname] = useState(false);\n  const [tempGameID, setTempGameID] = useState(lsGameID);\n  const [tempNickname, setTempNickname] = useState(lsNickname);\n  const [showCreateGame, setShowCreateGame] = useState(0);\n\n  // On Mount\n  useEffect(() => {\n    if (tempNickname) {\n      setNickname(tempNickname);\n    }\n  });\n\n  // On Update\n  useEffect(() => {\n    // Check if game exists\n    if (gameID !== tempGameID && tempGameID?.length === 4) {\n      setIsLoading(true);\n\n      API.ref()\n        .child('bunkermind')\n        .child(tempGameID.toUpperCase())\n        .once('value', (snap) => {\n          if (snap.val()) {\n            setGameID(tempGameID.toUpperCase());\n            setIsValidGameID(true);\n            setErrorGameID('');\n          } else {\n            setErrorGameID('Provided Game ID does not exist. Try again.');\n            setIsValidGameID(false);\n          }\n          setIsLoading(false);\n        });\n    }\n\n    if (tempGameID?.length < 4) {\n      setIsValidGameID(false);\n    }\n\n    if (tempGameID === gameID) {\n      setIsValidGameID(true);\n      setErrorGameID('');\n    }\n\n    // Check if nickname is valid\n    if (nickname?.length >= 3 || tempNickname?.length >= 3) {\n      setNickname(tempNickname || nickname);\n      setIsValidNickname(true);\n    } else {\n      setIsValidNickname(false);\n    }\n  }, [\n    gameID,\n    tempGameID,\n    setGameID,\n    setIsValidGameID,\n    setIsLoading,\n    nickname,\n    setIsValidNickname,\n    setNickname,\n    tempNickname,\n  ]);\n\n  const goToWaitingRoom = () => {\n    localStorageService.setDefaults(gameID, nickname);\n    setScreen(SCREENS.GAME);\n  };\n\n  const createGameSecret = () => {\n    setShowCreateGame(showCreateGame + 1);\n  };\n\n  const createGame = () => {\n    setIsLoading(true);\n    setIsCreatingGame(true);\n    const id = generateID();\n    const state = gameEngine.init(id);\n\n    try {\n      API.ref()\n        .child('bunkermind')\n        .update({\n          [id]: {\n            ...state,\n          },\n        });\n      setTempGameID(id);\n      setToast(toastService.success(toast, `Game created successfully. ID: ${id}`));\n    } catch {\n      setToast(toastService.error(toast, 'Creating game has failed'));\n    } finally {\n      setIsLoading(false);\n      setIsCreatingGame(false);\n    }\n  };\n\n  return (\n    <div className=\"home\">\n      <img\n        className=\"home__logo\"\n        src={logo}\n        alt=\"Bunker Mind logo\"\n        onClick={() => createGameSecret()}\n      />\n      <div className=\"home-section join-game\">\n        <TextField\n          className=\"mui-full-width\"\n          required\n          id=\"game-id\"\n          label=\"Game ID\"\n          value={tempGameID}\n          onChange={(e) => setTempGameID(e.target.value)}\n          helperText={errorGameID}\n          inputProps={{ maxLength: '4', autoComplete: 'off' }}\n        />\n        <TextField\n          className=\"mui-full-width\"\n          required\n          id=\"nickname\"\n          label=\"Nickname\"\n          defaultValue={tempNickname}\n          onChange={(e) => setTempNickname(e.target.value)}\n          inputProps={{ maxLength: '10', autoComplete: 'off' }}\n          helperText={\n            nickname && !isValidNickname ? 'Nickname must be at least 3 characters long.' : ''\n          }\n        />\n\n        <div>{isLoading && <LinearProgress style={{ background: COLORS.PRIMARY }} />}</div>\n\n        <Button\n          className=\"mui-block\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!isValidNickname || !isValidGameID}\n          onClick={() => goToWaitingRoom()}\n          style={{ background: COLORS.PRIMARY }}\n        >\n          Join {gameID}\n        </Button>\n        {showCreateGame > 3 && (\n          <Fragment>\n            <div className=\"home-section home-section--separator\">- or -</div>\n            <div className=\"home-section create-game\">\n              <Button\n                className=\"block\"\n                variant=\"contained\"\n                color=\"default\"\n                disabled={isCreatingGame}\n                onClick={() => createGame()}\n              >\n                Create a Game\n              </Button>\n            </div>\n          </Fragment>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\n\nimport useGlobalState from '../useGlobalState';\n\nconst Toast = () => {\n  // Global States\n  const [toast, setToast] = useGlobalState('toast');\n\n  const handleClose = () => {\n    setToast({\n      ...toast,\n      isVisible: false,\n    });\n  };\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left',\n      }}\n      open={toast.isVisible}\n      autoHideDuration={6000}\n      onClose={handleClose}\n    >\n      <Alert onClose={handleClose} severity={toast.severity}>\n        {toast.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default Toast;\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport avatarAxolotl from '../images/avatars/avatar-axolotl.svg';\nimport avatarCardinal from '../images/avatars/avatar-cardinal.svg';\nimport avatarFox from '../images/avatars/avatar-fox.svg';\nimport avatarHedgehog from '../images/avatars/avatar-hedgehog.svg';\nimport avatarLizard from '../images/avatars/avatar-lizard.svg';\nimport avatarMole from '../images/avatars/avatar-mole.svg';\nimport avatarMouse from '../images/avatars/avatar-mouse.svg';\nimport avatarOtter from '../images/avatars/avatar-otter.svg';\nimport avatarOwl from '../images/avatars/avatar-owl.svg';\nimport avatarPlatypus from '../images/avatars/avatar-platypus.svg';\nimport avatarRat from '../images/avatars/avatar-rat.svg';\nimport avatarSquirrel from '../images/avatars/avatar-squirrel.svg';\nimport avatarStarling from '../images/avatars/avatar-starling.svg';\nimport avatarToad from '../images/avatars/avatar-toad.svg';\nimport avatarTurtle from '../images/avatars/avatar-turtle.svg';\nimport avatarUnknown from '../images/avatars/avatar-unknown.svg';\n\nconst AVATAR_IMAGE_SOURCE = {\n  axolotl: avatarAxolotl,\n  cardinal: avatarCardinal,\n  fox: avatarFox,\n  hedgehog: avatarHedgehog,\n  lizard: avatarLizard,\n  mole: avatarMole,\n  mouse: avatarMouse,\n  otter: avatarOtter,\n  owl: avatarOwl,\n  platypus: avatarPlatypus,\n  rat: avatarRat,\n  squirrel: avatarSquirrel,\n  starling: avatarStarling,\n  toad: avatarToad,\n  turtle: avatarTurtle,\n};\n\nconst PlayerAvatar = ({ avatar, classNames = '' }) => {\n  return (\n    <Avatar\n      alt={avatar}\n      src={AVATAR_IMAGE_SOURCE[avatar] || avatarUnknown}\n      className={classNames}\n    />\n  );\n};\n\nexport default PlayerAvatar;\n","import React from 'react';\nimport Badge from '@material-ui/core/Badge';\n\nimport { isOnline, randomNumber } from '../utils';\n\nimport PlayerAvatar from './PlayerAvatar';\n\nconst PlayerBadge = ({ player, showName = false, isFloating = false, classNames = '' }) => {\n  const onlineClass = isOnline(player.lastUpdated) ? 'badge--online' : 'badge--offline';\n\n  const floatingClass = isFloating ? `floating-animation--${randomNumber(1, 5)}` : '';\n\n  return (\n    <div className={`badge-container ${floatingClass} ${classNames}`}>\n      <Badge\n        color=\"secondary\"\n        overlap=\"circle\"\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        variant=\"dot\"\n        className={`badge ${onlineClass}`}\n      >\n        <PlayerAvatar avatar={player.avatar} />\n      </Badge>\n      {showName && <span className=\"badge-name\">{player.nickname}</span>}\n    </div>\n  );\n};\n\nexport default PlayerBadge;\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { COLORS } from '../utils/contants';\n\nconst GameLoading = () => {\n  return (\n    <div className=\"game game-loading\">\n      <CircularProgress style={{ color: COLORS.PRIMARY, fontSize: 60 }} />\n    </div>\n  );\n};\n\nexport default GameLoading;\n","import React, { useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LockIcon from '@material-ui/icons/Lock';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport { SCREENS, COLORS } from '../utils/contants';\nimport toastService from '../utils/toastService';\n\nimport PlayerBadge from './PlayerBadge';\nimport GameLoading from './GameLoading';\n\nlet timeoutID = null;\n\nconst GameWaitingRoom = ({ justLoading }) => {\n  // Global States\n  const [dbRef] = useGlobalState('dbRef');\n  const [game] = useGlobalState('game');\n  const [, setGameID] = useGlobalState('gameID');\n  const [nickname] = useGlobalState('nickname');\n  const [, setScreen] = useGlobalState('screen');\n  const [toast, setToast] = useGlobalState('toast');\n\n  // Set your nickname on mount\n  useEffect(() => {\n    if (dbRef && !timeoutID) {\n      timeoutID = setTimeout(() => {\n        console.warn('TIMEOUT');\n        try {\n          if (!gameEngine.isUserSet) {\n            gameEngine.setPlayer(nickname);\n          }\n        } catch (err) {\n          setToast(toastService.error(toast, err));\n          setGameID(null);\n          setScreen(SCREENS.HOME);\n        } finally {\n          clearTimeout(timeoutID);\n        }\n      }, 500);\n    }\n  }, [dbRef, nickname, setGameID, setScreen, setToast, toast, game]);\n\n  if (justLoading) {\n    return <GameLoading />;\n  }\n\n  return (\n    <div className=\"game game-waiting-room\">\n      <header className=\"game-waiting-room__title\">\n        <CircularProgress style={{ color: COLORS.PRIMARY }} />\n        <h1>Waiting Room</h1>\n      </header>\n      <main>\n        <p>\n          The pandemic got us all in this bunker! But resources are scarce and soon that won't be\n          enough for all of us. Some heard that we are on our last toilet paper roll! As a group, we\n          decided that why to bother with being inclusive and welcoming when we can keep only the\n          ones that think like us?\n        </p>\n        <p>\n          The goal of the game is to match answers and think like the group. Each turn one player\n          will choose a question and each person secretly answers it. For example: What are 3\n          colors?\n        </p>\n        <p>\n          You want your answer match to as many people's answers as possible because you get a point\n          for every match, including your own (so make sure to write something for everything!)\n        </p>\n        <p>\n          Every round a number of people will move up (BAD!) or move down (rare, but it could\n          happen). The important thing to remember is that the lowest scores move, so whoever is\n          tied in points move together (but points reset for every question). If you ever go above\n          the 1st floor. You lose the game!\n        </p>\n        <p>\n          <b>Are you with us or against us? Do you have the bunker mind?</b>\n        </p>\n      </main>\n      <div className=\"game-waiting-room__line\">\n        {Object.values(game.players).map((player, index) => (\n          <PlayerBadge\n            key={player.nickname}\n            player={player}\n            showName\n            orderNumber={index}\n            isFloating\n          />\n        ))}\n      </div>\n      {gameEngine.user?.isAdmin && (\n        <fieldset className=\"game-admin-actions\">\n          <legend>Admin Actions</legend>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!gameEngine.isEveryoneOnline || Object.keys(game.players).length < 3}\n            onClick={() => gameEngine.lockAndStart()}\n            style={{ background: COLORS.PRIMARY }}\n            startIcon={<LockIcon />}\n          >\n            Lock and Start Game\n          </Button>\n        </fieldset>\n      )}\n    </div>\n  );\n};\n\nexport default GameWaitingRoom;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport NotListedLocationIcon from '@material-ui/icons/NotListedLocation';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport { COLORS, GAME_PHASES } from '../utils/contants';\n\nimport PlayerBadge from './PlayerBadge';\n\nconst TurnIcon = ({ turnType }) => {\n  switch (turnType) {\n    case 1:\n    case 2:\n    case 3:\n      return (\n        <div className=\"game-header__turn-type\">\n          <span className=\"game-header__turn-type-number\">{turnType}</span> <ArrowUpwardIcon />\n        </div>\n      );\n    case 0:\n      return (\n        <div className=\"game-header__turn-type\">\n          <span className=\"game-header__turn-type-number\">1/1</span> <ImportExportIcon />\n        </div>\n      );\n    default:\n      return (\n        <div className=\"game-header__turn-type\">\n          <NotListedLocationIcon />\n        </div>\n      );\n  }\n};\n\nconst FloorPosition = ({ floor }) => {\n  return (\n    <div className=\"game-header__player-position\" title=\"Your floor positon\">\n      <BusinessIcon />\n      <span className=\"game-header__player-position-number\">{floor}</span>\n    </div>\n  );\n};\n\nconst Score = ({ score }) => {\n  return (\n    <div className=\"game-header__score\" title=\"Your score this turn\">\n      <span className=\"game-header__score-number\">{score}</span>\n      <FavoriteIcon />\n    </div>\n  );\n};\n\nconst Player = ({ player }) => {\n  return (\n    <div className=\"game-header__badge\">\n      <PlayerBadge player={player} />\n      <span className=\"game-header__badge-name\">\n        <strong>{player.nickname}</strong>, the {player.avatar}\n      </span>\n      <IconButton className=\"game-header__refresh\" onClick={() => gameEngine.refresh()}>\n        <AutorenewIcon />\n      </IconButton>\n    </div>\n  );\n};\n\nconst GameHeader = () => {\n  const [game] = useGlobalState('game');\n  const [nickname] = useGlobalState('nickname');\n\n  const currentPlayer = gameEngine.players[nickname];\n\n  if (!currentPlayer) return <div></div>;\n  return (\n    <AppBar position=\"static\" style={{ background: COLORS.PRIMARY }} className=\"game-header\">\n      <Player player={currentPlayer} />\n      {(gameEngine.phase === GAME_PHASES.COMPARE || gameEngine.phase === GAME_PHASES.RESULT) && (\n        <Score score={currentPlayer.score} />\n      )}\n      <TurnIcon turnType={game.turnType} />\n      <FloorPosition floor={currentPlayer.floor} />\n    </AppBar>\n  );\n};\n\nexport default GameHeader;\n","import React from 'react';\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\nimport Button from '@material-ui/core/Button';\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\n\nimport floorTopImg from '../images/bunker/floor-top.svg';\nimport floor1img from '../images/bunker/floor-1.svg';\nimport floor2img from '../images/bunker/floor-2.svg';\nimport floor3img from '../images/bunker/floor-3.svg';\nimport floor4img from '../images/bunker/floor-4.svg';\nimport floor5img from '../images/bunker/floor-5.svg';\nimport floor6img from '../images/bunker/floor-6.svg';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { getTurnTypeFlavorText } from '../utils';\nimport { COLORS, TURN_TYPES } from '../utils/contants';\n\nimport GameHeader from './GameHeader';\nimport PlayerAvatar from './PlayerAvatar';\nimport PlayerBadge from './PlayerBadge';\n\nconst FLOOR_IMAGE_SOURCE = {\n  1: floor1img,\n  2: floor2img,\n  3: floor3img,\n  4: floor4img,\n  5: floor5img,\n  6: floor6img,\n};\n\nconst Floor = ({ floorNumber, players, blocker = false }) => {\n  return (\n    <div className={`bunker bunker--${floorNumber}`}>\n      {blocker && <span className=\"bunker-active-blocker\"></span>}\n      <img\n        className=\"bunker__floor-image\"\n        src={FLOOR_IMAGE_SOURCE[floorNumber]}\n        alt={`floor${floorNumber}`}\n      />\n      <AvatarGroup className=\"bunker__avatar-group\" max={5}>\n        {players.map((player) => (\n          <PlayerAvatar key={player.avatar} avatar={player.avatar} />\n        ))}\n      </AvatarGroup>\n    </div>\n  );\n};\n\nconst GameAnnouncement = () => {\n  const [game] = useGlobalState('game');\n  const [nickname] = useGlobalState('nickname');\n\n  // Split players by their floors\n  const floors = Object.values(game.players).reduce(\n    (floorsDistribution, player) => {\n      const floorNumber = `floor${player.floor}`;\n      if (player.nickname === nickname) {\n        floorsDistribution[floorNumber] = [player, ...floorsDistribution[floorNumber]];\n      } else {\n        floorsDistribution[floorNumber].push(player);\n      }\n\n      return floorsDistribution;\n    },\n    {\n      floor1: [],\n      floor2: [],\n      floor3: [],\n      floor4: [],\n      floor5: [],\n      floor6: [],\n    }\n  );\n\n  return (\n    <div className=\"game game-container game-announcement\">\n      <GameHeader />\n      <div className=\"game-announcement__content\">\n        <div className=\"bunker bunker--top\">\n          <img\n            className=\"bunker__floor-image bunker__floor-image--top\"\n            src={floorTopImg}\n            alt=\"bunker-top-floor\"\n          />\n          <div className=\"bunker__info-container\">\n            <h2>Round {game.turn}</h2>\n            <p className=\"bunker-info--flavor-text\">\n              {getTurnTypeFlavorText(game.turnType, game.turn)}\n            </p>\n            <p className=\"bunker-info--turn-type\">{TURN_TYPES[game.turnType]}</p>\n            <p className=\"bunker-info--active-player\">\n              <strong>{gameEngine.activePlayer.nickname}</strong> will choose the question.\n            </p>\n            <p className=\"bunker-info--risk-warning\">\n              If someone is at risk, message will be here.\n            </p>\n          </div>\n        </div>\n        {Object.values(floors).map((players, index) => {\n          const floorNumber = index + 1;\n          return (\n            <Floor\n              key={floorNumber}\n              floorNumber={floorNumber}\n              players={players}\n              blocker={gameEngine.floorBlockers?.[floorNumber]}\n            />\n          );\n        })}\n      </div>\n      {!gameEngine.isUserReady ? (\n        <div className=\"action-button\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={gameEngine.isUserReady}\n            onClick={() => gameEngine.setUserReady()}\n            style={{ background: COLORS.PRIMARY }}\n            startIcon={<ThumbUpIcon />}\n          >\n            {gameEngine.isUserReady ? <DoneOutlineIcon /> : \"I'm ready\"}\n          </Button>\n        </div>\n      ) : (\n        <div className=\"action-button\">\n          <h3>Waiting for all players to be ready</h3>\n          {gameEngine.whosReady?.length && (\n            <div className=\"whos-ready-line\">\n              {gameEngine.whosReady.map((player, index) => (\n                <PlayerBadge\n                  key={player.nickname}\n                  player={player}\n                  showName\n                  orderNumber={index}\n                  isFloating\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n      {gameEngine.user?.isAdmin && (\n        <div className=\"game-admin-actions\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!gameEngine.isEveryoneReady}\n            onClick={() => gameEngine.goToQuestionPhase()}\n            style={{ background: COLORS.PRIMARY }}\n            endIcon={<DoubleArrowIcon />}\n          >\n            Begin Turn\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameAnnouncement;\n","import React, { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport LiveHelpIcon from '@material-ui/icons/LiveHelp';\nimport MailIcon from '@material-ui/icons/Mail';\n\nimport gameEngine from '../engine';\n\nimport { getUniqueQuestions } from '../utils';\nimport { COLORS } from '../utils/contants';\n\nconst GameQuestionSelection = () => {\n  // Local States\n  const [questions, setQuestions] = useState([]);\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n\n  // Get questions on mount\n  useEffect(() => {\n    setQuestions(getUniqueQuestions(gameEngine.usedQuestions));\n  }, [setQuestions]);\n\n  const chooseQuestion = (event) => {\n    setSelectedQuestion(event.target.value);\n  };\n\n  return (\n    <div className=\"game-question-selection\">\n      <div className=\"game-question-selection__icon\">\n        <LiveHelpIcon fontSize=\"large\" />\n      </div>\n      <h2 className=\"game-question-selection__title\">\n        {gameEngine.activePlayer.nickname}, it's time to select a question!\n      </h2>\n      <p>\n        Keep in mind that you want a question that you are able to answer and will give you most\n        matching answer with other players. And don't take too long, other players are waiting\n      </p>\n      <RadioGroup\n        aria-label=\"question\"\n        name=\"question\"\n        value={selectedQuestion}\n        onChange={chooseQuestion}\n      >\n        {questions.map((question) => (\n          <FormControlLabel\n            key={question.id}\n            className=\"game-question-selection__question\"\n            value={question.id}\n            control={<Radio style={{ color: COLORS.PRIMARY }} />}\n            label={question.question}\n          />\n        ))}\n      </RadioGroup>\n      <div className=\"action-button\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!selectedQuestion}\n          onClick={() => gameEngine.goToAnswerPhase(selectedQuestion)}\n          style={{ background: COLORS.PRIMARY }}\n          endIcon={<MailIcon />}\n        >\n          Submit QUestion to Players\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameQuestionSelection;\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport gameEngine from '../engine';\n\nimport { COLORS } from '../utils/contants';\n\nconst GameQuestionWaiting = () => {\n  return (\n    <div className=\"game-question-waiting\">\n      <h1>Sit tight!</h1>\n      <h2>{gameEngine.activePlayer.nickname} is choosing a question!</h2>\n      <div className=\"game-question-waiting__spinner\">\n        <CircularProgress style={{ color: COLORS.PRIMARY }} />\n      </div>\n      <h3>In the meantime, review the rules:</h3>\n      <ul className=\"game-question-waiting__rules\">\n        <li>The goal is not to be correct, it's to match!</li>\n        <li>You are trying to match answers with as many people as possible.</li>\n        <li>\n          <strong className=\"tip--ok\">OK</strong> Typos are forgiving\n        </li>\n        <li>\n          <strong className=\"tip--not-ok\">NOT OK</strong> Specific vs General: Lassie &#8800;\n          Collie; Truck &#8800; Red Truck\n        </li>\n        <li>\n          <strong className=\"tip--ok\">OK</strong> Plurals match: Dog = Dogs\n        </li>\n        <li>\n          <strong className=\"tip--not-ok\">NOT OK</strong> Genders don't match: Prince &#8800;\n          Princess\n        </li>\n        <li>\n          <strong className=\"tip--ok\">OK</strong> If it refers to the same thing: Lincoln = Abe\n          Lincoln = Abraham Lincoln\n        </li>\n        <li>\n          <strong>REMEMBER: Lowest scores move all together, so if you're tied, you go too!</strong>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default GameQuestionWaiting;\n","import React from 'react';\n\nimport gameEngine from '../engine';\n\nimport GameHeader from './GameHeader';\nimport GameQuestionSelection from './GameQuestionSelection';\nimport GameQuestionWaiting from './GameQuestionWaiting';\n\nconst GameQuestion = () => {\n  return (\n    <div className=\"game game-container game-question\">\n      <GameHeader />\n      {gameEngine.isUserActivePlayer ? <GameQuestionSelection /> : <GameQuestionWaiting />}\n    </div>\n  );\n};\n\nexport default GameQuestion;\n","import React, { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport CreateIcon from '@material-ui/icons/Create';\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\nimport LooksOneIcon from '@material-ui/icons/LooksOne';\nimport LooksTwoIcon from '@material-ui/icons/LooksTwo';\nimport LooksThreeIcon from '@material-ui/icons/Looks3';\nimport LooksFourIcon from '@material-ui/icons/Looks4';\nimport LooksFiveIcon from '@material-ui/icons/Looks5';\n\nimport gameEngine from '../engine';\n\nimport { getQuestion } from '../utils';\nimport { COLORS } from '../utils/contants';\n\nimport GameHeader from './GameHeader';\n\nconst ANSWER_ICONS = {\n  0: <LooksOneIcon fontSize=\"large\" />,\n  1: <LooksTwoIcon fontSize=\"large\" />,\n  2: <LooksThreeIcon fontSize=\"large\" />,\n  3: <LooksFourIcon fontSize=\"large\" />,\n  4: <LooksFiveIcon fontSize=\"large\" />,\n};\n\nconst GameAnswer = () => {\n  // Local States\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answers, setAnswers] = useState([]);\n  const [areAnswersValid, setAreAnswersValid] = useState(false);\n\n  // Get questions on mount\n  useEffect(() => {\n    const userAnswers = Object.values(gameEngine.userAnswers);\n    const gotQuestion = getQuestion(gameEngine.currentQuestionID);\n    setCurrentQuestion(gotQuestion);\n    setAnswers(\n      new Array(gotQuestion.answers).fill('').map((a, index) => userAnswers[index]?.text || '')\n    );\n  }, [setCurrentQuestion, setAnswers]);\n\n  useEffect(() => {\n    if (!answers.every((answer) => Boolean(answer))) {\n      setAreAnswersValid(false);\n    } else {\n      setAreAnswersValid(answers.length === new Set(answers).size);\n    }\n  }, [answers]);\n\n  const updateAnswer = (value, answerIndex) => {\n    const newAnswers = [...answers];\n    newAnswers[answerIndex] = value.trim();\n    setAnswers(newAnswers);\n  };\n\n  console.log(answers);\n\n  return (\n    <div className=\"game-game game-container game-answer\">\n      <GameHeader />\n      <div className=\"game-answer__icon\">\n        <CreateIcon fontSize=\"large\" />\n      </div>\n      <h2>Answer Time!</h2>\n      <h3 className=\"game-answer__current-question\">{currentQuestion?.question}</h3>\n      {answers.map((answer, index) => {\n        const answerNumber = `answer-${index + 1}`;\n        const answerLabel = `Answer ${index + 1}`;\n\n        return (\n          <div className=\"game-answer__answers\" key={answerNumber}>\n            {ANSWER_ICONS[index]}\n            <TextField\n              id={answerNumber}\n              label={answerLabel}\n              variant=\"outlined\"\n              className=\"answer-input-field\"\n              defaultValue={answers[index] || ''}\n              onChange={(e) => updateAnswer(e.target.value, index)}\n              disabled={gameEngine.isUserReady}\n              inputProps={{ autoComplete: 'off' }}\n            />\n          </div>\n        );\n      })}\n      <div className=\"action-button\">\n        <span className=\"action-button__warning\">\n          You must write all the answers and they must be different from each other to be able to\n          submit.\n        </span>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!areAnswersValid || gameEngine.isUserReady}\n          onClick={() => gameEngine.submitAnswers(answers)}\n          style={{ background: COLORS.PRIMARY }}\n        >\n          {gameEngine.isUserReady ? <DoneOutlineIcon /> : 'Submit Answers'}\n        </Button>\n      </div>\n      {gameEngine.user?.isAdmin && (\n        <div className=\"game-admin-actions\">\n          <span className=\"game-admin-actions__warning\">\n            This action should be automatic. Only use the button if the next phase fails to trigger\n            after everybody is ready.\n          </span>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!gameEngine.isEveryoneReady}\n            onClick={() => gameEngine.goToComparePhase()}\n            style={{ background: COLORS.PRIMARY }}\n            endIcon={<DoubleArrowIcon />}\n          >\n            Next Phase: Compare\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameAnswer;\n","import React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport LockIcon from '@material-ui/icons/Lock';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport gameEngine from '../engine';\nimport { COLORS, NOOP } from '../utils/contants';\n\nimport PlayerAvatar from './PlayerAvatar';\n\nconst getChipTypeOptions = (type, answerId, currentUser, downvotes) => {\n  switch (type) {\n    case 'add':\n      return {\n        clickAction: () => gameEngine.addMatch(answerId, currentUser),\n        deleteAction: () => gameEngine.addMatch(answerId, currentUser),\n        deleteIcon: <PublishIcon />,\n        chickable: true,\n      };\n    case 'locked':\n      return {\n        clickAction: NOOP,\n        deleteAction: NOOP,\n        deleteIcon: <LockIcon />,\n        chickable: false,\n      };\n    case 'mine':\n      return {\n        clickAction: null,\n        deleteAction: () => gameEngine.removeMatch(answerId, currentUser),\n        deleteIcon: <CloseIcon />,\n        chickable: null,\n      };\n    case 'votable':\n      const didIVote = downvotes[currentUser] ? { color: COLORS.RED } : null;\n      return {\n        clickAction: null,\n        deleteAction: () => gameEngine.voteForAnswer(answerId, currentUser),\n        deleteIcon: <ThumbDownIcon style={didIVote} />,\n        chickable: null,\n      };\n\n    default:\n      return {\n        clickAction: null,\n        deleteAction: null,\n        deleteIcon: null,\n        chickable: null,\n      };\n  }\n};\n\nconst AnswerChip = ({ answer, avatar, type, answerId, currentUser, downvotes }) => {\n  const options = getChipTypeOptions(type, answerId, currentUser, downvotes);\n\n  return (\n    <Chip\n      avatar={<PlayerAvatar avatar={avatar} />}\n      label={answer}\n      onClick={options.clickAction}\n      onDelete={options.deleteAction}\n      deleteIcon={options.deleteIcon}\n      clickable={options.clickable}\n      className=\"answer-chip\"\n    />\n  );\n};\n\nexport default AnswerChip;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport { getQuestion } from '../utils';\nimport { COLORS } from '../utils/contants';\n\nimport GameHeader from './GameHeader';\nimport AnswerChip from './AnswerChip';\n\nconst GameCompare = () => {\n  // Global States\n  const [nickname] = useGlobalState('nickname');\n  // Local States\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n\n  // Get questions on mount\n  useEffect(() => {\n    const gotQuestion = getQuestion(gameEngine.currentQuestionID);\n    setCurrentQuestion(gotQuestion);\n  }, [setCurrentQuestion]);\n\n  return (\n    <div className=\"game-game game-container game-compare\">\n      <GameHeader />\n      {gameEngine.compare ? (\n        <Fragment>\n          <div className=\"game-compare__icon\">\n            <QuestionAnswerIcon fontSize=\"large\" />\n          </div>\n          <h2>Compare Answers ({gameEngine.answersSet.length + 1} left)</h2>\n          <h3 className=\"game-compare__current-question\">{currentQuestion?.question}</h3>\n\n          <div className=\"game-compare__accepted-answers\">\n            <div className=\"game-compare__current-answer\">{gameEngine.compare.currentAnswer}</div>\n            <div className=\"game-compare__accepted-chips\">\n              {gameEngine?.compare?.matches &&\n                Object.entries(gameEngine.compare.matches).map(([nicknameKey, answerObj]) => {\n                  const key = `matched-answer-${nicknameKey}`;\n\n                  let type = 'votable';\n                  if (answerObj.isLocked) {\n                    type = 'locked';\n                  } else if (nicknameKey === nickname) {\n                    type = 'mine';\n                  }\n\n                  return (\n                    <AnswerChip\n                      key={key}\n                      type={type}\n                      answer={answerObj.answer}\n                      avatar={gameEngine.getPlayerAvatar(nicknameKey)}\n                      answerId={type === 'votable' ? nicknameKey : answerObj.answerId}\n                      currentUser={nickname}\n                      downvotes={answerObj?.downvotes}\n                    />\n                  );\n                })}\n            </div>\n          </div>\n          <ul className=\"game-compare__instructions\">\n            <li>Locked answered above are exact matches and can't be changed.</li>\n            <li>\n              If you disagree with someone's answer, you can click on the Thumbs Down icon, if\n              available.\n            </li>\n            <li>If you believe one of your answers below, click to add it to the pool:</li>\n          </ul>\n          <div className=\"game-compare__answers-chips\">\n            {Object.entries(gameEngine.userAnswers).map(([answerId, answerObj]) => {\n              if (!answerObj.isMatch) {\n                return (\n                  <AnswerChip\n                    key={answerId}\n                    type={Boolean(gameEngine.userCompareMatchingAnswer) ? 'none' : 'add'}\n                    answer={answerObj.text}\n                    avatar={gameEngine.getPlayerAvatar(nickname)}\n                    answerId={answerId}\n                    currentUser={nickname}\n                  />\n                );\n              }\n              return <span key={answerId}></span>;\n            })}\n          </div>\n\n          <div className=\"action-button\">\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={gameEngine.isUserReady}\n              onClick={() => gameEngine.doneComparing()}\n              style={{ background: COLORS.PRIMARY }}\n            >\n              {gameEngine.isUserReady ? <DoneOutlineIcon /> : 'Done'}\n            </Button>\n          </div>\n        </Fragment>\n      ) : (\n        <div className=\"game-compare-loading\">\n          <CircularProgress style={{ color: COLORS.PRIMARY }} />\n          <p>Loading or something's wrong. I'm not sure</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameCompare;\n","import React, { Fragment } from 'react';\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\nimport Button from '@material-ui/core/Button';\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\n\nimport floorTopImg from '../images/bunker/floor-top.svg';\nimport floor1img from '../images/bunker/floor-1.svg';\nimport floor2img from '../images/bunker/floor-2.svg';\nimport floor3img from '../images/bunker/floor-3.svg';\nimport floor4img from '../images/bunker/floor-4.svg';\nimport floor5img from '../images/bunker/floor-5.svg';\nimport floor6img from '../images/bunker/floor-6.svg';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { COLORS, TURN_TYPES, RESULT_ACTION } from '../utils/contants';\n\nimport GameHeader from './GameHeader';\nimport PlayerAvatar from './PlayerAvatar';\n\nconst FLOOR_IMAGE_SOURCE = {\n  1: floor1img,\n  2: floor2img,\n  3: floor3img,\n  4: floor4img,\n  5: floor5img,\n  6: floor6img,\n};\n\nconst MOVE_ANIMATION_CLASS = {\n  MOVE_UP: 'move-animation--up',\n  MOVE_DOWN: 'move-animation--down',\n  SAVE: 'move-animation--save',\n  STAY: 'move-animation--stay',\n  GAME_OVER: 'move-animation--game-over',\n};\n\nconst FloorAnimated = ({ floorNumber, players, blocker }) => {\n  const blockerClass = blocker === 'removed' ? 'bunker-removed-blocker' : 'bunker-active-blocker';\n  return (\n    <div className=\"bunker bunker--2\">\n      {Boolean(blocker) && <span className={blockerClass}></span>}\n      <img\n        className=\"bunker__floor-image\"\n        src={FLOOR_IMAGE_SOURCE[floorNumber]}\n        alt={`floor${floorNumber}`}\n      />\n      <AvatarGroup className=\"bunker__avatar-group\" max={7}>\n        {players.map((player) => (\n          <PlayerAvatar\n            key={player.name}\n            avatar={gameEngine.getPlayerAvatar(player.name)}\n            classNames={MOVE_ANIMATION_CLASS[player.action]}\n          />\n        ))}\n      </AvatarGroup>\n    </div>\n  );\n};\n\nconst FloorExplanationSentence = ({ player }) => {\n  switch (player.action) {\n    case RESULT_ACTION.GAME_OVER:\n      return (\n        <Fragment>\n          <strong>{player.name}</strong> has left the bunker. Game Over!\n        </Fragment>\n      );\n    case RESULT_ACTION.SAVE:\n      return (\n        <Fragment>\n          <strong>{player.name}</strong> got a low score, but was saved this time.\n        </Fragment>\n      );\n    case RESULT_ACTION.MOVE_UP:\n      return (\n        <Fragment>\n          <strong>{player.name}</strong> moved down from {player.from} to {player.to}.\n        </Fragment>\n      );\n    case RESULT_ACTION.MOVE_DOWN:\n      return (\n        <Fragment>\n          <strong>{player.name}</strong> had a highest score moved one floor down!\n        </Fragment>\n      );\n    default:\n      return (\n        <Fragment>\n          <strong>{player.name}</strong> didn't move.\n        </Fragment>\n      );\n  }\n};\n\nconst FloorExplanation = ({ player, position }) => {\n  return (\n    <li className={`result-explanation__line result-explanation__line--${position}`}>\n      <FloorExplanationSentence player={player} />\n    </li>\n  );\n};\n\nconst GameResult = () => {\n  const [game] = useGlobalState('game');\n\n  return (\n    <div className=\"game game-container game-result\">\n      <GameHeader />\n      <div className=\"game-announcement__content\">\n        <div className=\"bunker bunker--top\">\n          <img\n            className=\"bunker__floor-image bunker__floor-image--top\"\n            src={floorTopImg}\n            alt=\"bunker-top-floor\"\n          />\n          <div className=\"bunker__info-container\">\n            <h2>Round {game.turn} Results</h2>\n            <p className=\"bunker-info--turn-type\">{TURN_TYPES[game.turnType]}</p>\n          </div>\n        </div>\n        {Object.values(gameEngine.orderedResults).map((players, index) => {\n          const floorNumber = index + 1;\n          return (\n            <FloorAnimated\n              key={floorNumber}\n              floorNumber={floorNumber}\n              players={players}\n              blocker={gameEngine.blockerState[floorNumber]}\n            />\n          );\n        })}\n      </div>\n\n      <ul className=\"result-explanation\">\n        {gameEngine.flatOrderResults.reverse().map((player, index) => {\n          const key = `explanation-key-${index}`;\n          return <FloorExplanation key={key} player={player} position={index} />;\n        })}\n\n        {Object.entries(gameEngine.blockerState).map(([floor, state], index) => {\n          if (state !== 'removed') return null;\n\n          const position = gameEngine.flatOrderResults.length + index;\n          const key = `explanation-key-floor-${floor}`;\n          return (\n            <li\n              key={key}\n              className={`result-explanation__line result-explanation__line--${position}`}\n            >\n              <strong>The floor {floor}'s barrier will be removed.</strong>\n            </li>\n          );\n        })}\n      </ul>\n\n      <div className=\"action-button\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={gameEngine.isUserReady}\n          onClick={() => gameEngine.readyForNewTurn()}\n          style={{ background: COLORS.PRIMARY }}\n        >\n          {gameEngine.isUserReady ? <DoneOutlineIcon /> : 'OK'}\n        </Button>\n      </div>\n\n      {gameEngine.user?.isAdmin && (\n        <div className=\"game-admin-actions\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!gameEngine.isEveryoneReady}\n            onClick={() => gameEngine.startNewTurn()}\n            style={{ background: COLORS.PRIMARY }}\n            endIcon={<DoubleArrowIcon />}\n          >\n            New Round\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameResult;\n","import React from 'react';\nimport GavelIcon from '@material-ui/icons/Gavel';\nimport Button from '@material-ui/core/Button';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport { COLORS, LOSER_FLAVOR_TEXT, SCREENS } from '../utils/contants';\nimport localStorageService from '../utils/localStorage';\n\nconst GameOver = () => {\n  // Global States\n  const [, setGameID] = useGlobalState('gameID');\n  const [, setScreen] = useGlobalState('screen');\n\n  const goHome = () => {\n    localStorageService.resetGameID();\n    setScreen(SCREENS.HOME);\n    setGameID('null');\n  };\n\n  return (\n    <div className=\"game game-container game-game-over\">\n      <div className=\"game-game-over__icon\">\n        <GavelIcon fontSize=\"large\" />\n      </div>\n      <h2>Game Over</h2>\n\n      <h3>After they left the bunker, this is what happened:</h3>\n      <ul className=\"game-game-over__results\">\n        {gameEngine.losers.map((player, index) => {\n          const key = `${player.name}-${index}`;\n          return (\n            <li key={key}>\n              {player.name} {LOSER_FLAVOR_TEXT[player.flavorTextID]}.\n            </li>\n          );\n        })}\n      </ul>\n\n      <h3>Good Game!</h3>\n\n      <div className=\"action-button\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => goHome()}\n          style={{ background: COLORS.PRIMARY }}\n        >\n          Home\n        </Button>\n      </div>\n\n      {gameEngine.user?.isAdmin && (\n        <div className=\"game-admin-actions\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => gameEngine.deleteGame()}\n            style={{ background: COLORS.PRIMARY }}\n          >\n            Delete Game\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameOver;\n","import React, { Fragment } from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport gameEngine from '../engine';\n\nconst Mocks = ({ avatar }) => {\n  return (\n    <Fragment>\n      {process.env.NODE_ENV === 'development' && (\n        <div className=\"mock-buttons\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            onClick={() => gameEngine.mock('waiting.incomplete')}\n          >\n            Waiting 2 people\n          </Button>\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            onClick={() => gameEngine.mock('waiting.sufficient')}\n          >\n            Waiting 4 people\n          </Button>\n          <Button variant=\"contained\" size=\"small\" onClick={() => gameEngine.mock('waiting.full')}>\n            Waiting 12 people\n          </Button>\n          <Button variant=\"contained\" size=\"small\" onClick={() => gameEngine.mock('announcement')}>\n            Announcement 12\n          </Button>\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            onClick={() => gameEngine.mock('announcement.ready')}\n          >\n            Announcement 12 Ready\n          </Button>\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            onClick={() => gameEngine.mock('question.active')}\n          >\n            Question Active\n          </Button>\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            onClick={() => gameEngine.mock('question.passive')}\n          >\n            Question Passive\n          </Button>\n          <Button variant=\"contained\" size=\"small\" onClick={() => gameEngine.mock('answer.ready')}>\n            Answers Ready\n          </Button>\n          <Button variant=\"contained\" size=\"small\" onClick={() => gameEngine.mock('answer.ready3')}>\n            Answers Ready 3\n          </Button>\n          <Button variant=\"contained\" size=\"small\" onClick={() => gameEngine.mock('answer.ready4')}>\n            Answers Ready 4\n          </Button>\n          <Button variant=\"contained\" size=\"small\" onClick={() => gameEngine.mock('compare.ready')}>\n            Compare Ready 1 up\n          </Button>\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            onClick={() => gameEngine.mock('compare.result.animation')}\n          >\n            Compare 12 to result animation\n          </Button>\n          <Button variant=\"contained\" size=\"small\" onClick={() => gameEngine.mock('result')}>\n            Result\n          </Button>\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Mocks;\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/contants';\n\nimport Home from './Home';\nimport Toast from './Toast';\nimport Game from './Game';\nimport Mocks from './Mocks';\n\nconst version = '0.5.642'; // patch number is always equal to the number of questions\n\nconst Screen = () => {\n  const [screen] = useGlobalState('screen');\n\n  switch (screen) {\n    case SCREENS.GAME:\n      return <Game />;\n    default:\n      return <Home />;\n  }\n};\n\nconst App = () => {\n  // Global States\n  const [isLoading] = useGlobalState('isLoading');\n\n  return (\n    <Container maxWidth=\"lg\" className=\"app-container\">\n      {isLoading ? <LinearProgress /> : <div className=\"progress-bar-placeholder\" />}\n      <Screen />\n      <Toast />\n      <Mocks />\n      <span className=\"release-number\">v{version}</span>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './stylesheets/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/floor-top.f5673912.svg\";","module.exports = __webpack_public_path__ + \"static/media/floor-1.110851bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/floor-2.aceb9f1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/floor-3.d3c82fc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/floor-4.752faaa7.svg\";","module.exports = __webpack_public_path__ + \"static/media/floor-5.dc3c4c0d.svg\";","module.exports = __webpack_public_path__ + \"static/media/floor-6.89ba1565.svg\";","module.exports = __webpack_public_path__ + \"static/media/bunker-mind-logo.1eae41aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-axolotl.b014f492.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-cardinal.99644b12.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-fox.b6c20bca.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-hedgehog.152df38d.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-lizard.035cb6d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-mole.9cebf25b.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-mouse.22dcc222.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-otter.664f769a.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-owl.7a7e2009.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-platypus.77366cfe.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-rat.f15cecff.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-squirrel.9e69aff1.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-starling.b77d2556.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-toad.63580b90.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-turtle.7c3b1257.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar-unknown.62489f9d.svg\";"],"sourceRoot":""}